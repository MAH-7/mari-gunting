{
  "swagger": "2.0",
  "info": {
    "description": "",
    "title": "standard public schema",
    "version": "13.0.5"
  },
  "host": "uufiyurcsldecspakneg.supabase.co:443",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json",
    "application/vnd.pgrst.object+json;nulls=stripped",
    "application/vnd.pgrst.object+json",
    "text/csv"
  ],
  "produces": [
    "application/json",
    "application/vnd.pgrst.object+json;nulls=stripped",
    "application/vnd.pgrst.object+json",
    "text/csv"
  ],
  "paths": {
    "/": {
      "get": {
        "produces": [
          "application/openapi+json",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "OpenAPI description (this document)",
        "tags": [
          "Introspection"
        ]
      }
    },
    "/barbershops": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.barbershops.id"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.owner_id"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.name"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.description"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.logo_url"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.cover_images"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.phone_number"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.email"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.website_url"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.address_line1"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.address_line2"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.city"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.state"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.postal_code"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.country"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.location"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.opening_hours"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.is_open_now"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.verification_status"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.ssm_number"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.rating"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.total_reviews"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.total_bookings"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.amenities"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.payment_methods"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.is_featured"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.is_verified"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.updated_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/barbershops"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "summary": "Physical barbershop locations",
        "tags": [
          "barbershops"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.barbershops"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "Physical barbershop locations",
        "tags": [
          "barbershops"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.barbershops.id"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.owner_id"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.name"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.description"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.logo_url"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.cover_images"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.phone_number"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.email"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.website_url"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.address_line1"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.address_line2"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.city"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.state"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.postal_code"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.country"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.location"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.opening_hours"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.is_open_now"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.verification_status"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.ssm_number"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.rating"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.total_reviews"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.total_bookings"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.amenities"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.payment_methods"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.is_featured"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.is_verified"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.updated_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Physical barbershop locations",
        "tags": [
          "barbershops"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.barbershops.id"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.owner_id"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.name"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.description"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.logo_url"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.cover_images"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.phone_number"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.email"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.website_url"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.address_line1"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.address_line2"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.city"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.state"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.postal_code"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.country"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.location"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.opening_hours"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.is_open_now"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.verification_status"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.ssm_number"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.rating"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.total_reviews"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.total_bookings"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.amenities"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.payment_methods"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.is_featured"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.is_verified"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershops.updated_at"
          },
          {
            "$ref": "#/parameters/body.barbershops"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Physical barbershop locations",
        "tags": [
          "barbershops"
        ]
      }
    },
    "/payments": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.payments.id"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.booking_id"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.customer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.amount"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.currency"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.payment_method"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.payment_status"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.stripe_payment_id"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.stripe_payment_intent_id"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.billplz_bill_id"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.receipt_url"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.refund_amount"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.refunded_at"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.refund_reason"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.updated_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/payments"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "summary": "Payment transactions",
        "tags": [
          "payments"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.payments"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "Payment transactions",
        "tags": [
          "payments"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.payments.id"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.booking_id"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.customer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.amount"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.currency"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.payment_method"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.payment_status"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.stripe_payment_id"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.stripe_payment_intent_id"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.billplz_bill_id"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.receipt_url"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.refund_amount"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.refunded_at"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.refund_reason"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.updated_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Payment transactions",
        "tags": [
          "payments"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.payments.id"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.booking_id"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.customer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.amount"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.currency"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.payment_method"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.payment_status"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.stripe_payment_id"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.stripe_payment_intent_id"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.billplz_bill_id"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.receipt_url"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.refund_amount"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.refunded_at"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.refund_reason"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.payments.updated_at"
          },
          {
            "$ref": "#/parameters/body.payments"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Payment transactions",
        "tags": [
          "payments"
        ]
      }
    },
    "/spatial_ref_sys": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.spatial_ref_sys.srid"
          },
          {
            "$ref": "#/parameters/rowFilter.spatial_ref_sys.auth_name"
          },
          {
            "$ref": "#/parameters/rowFilter.spatial_ref_sys.auth_srid"
          },
          {
            "$ref": "#/parameters/rowFilter.spatial_ref_sys.srtext"
          },
          {
            "$ref": "#/parameters/rowFilter.spatial_ref_sys.proj4text"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/spatial_ref_sys"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "spatial_ref_sys"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.spatial_ref_sys"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "spatial_ref_sys"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.spatial_ref_sys.srid"
          },
          {
            "$ref": "#/parameters/rowFilter.spatial_ref_sys.auth_name"
          },
          {
            "$ref": "#/parameters/rowFilter.spatial_ref_sys.auth_srid"
          },
          {
            "$ref": "#/parameters/rowFilter.spatial_ref_sys.srtext"
          },
          {
            "$ref": "#/parameters/rowFilter.spatial_ref_sys.proj4text"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "spatial_ref_sys"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.spatial_ref_sys.srid"
          },
          {
            "$ref": "#/parameters/rowFilter.spatial_ref_sys.auth_name"
          },
          {
            "$ref": "#/parameters/rowFilter.spatial_ref_sys.auth_srid"
          },
          {
            "$ref": "#/parameters/rowFilter.spatial_ref_sys.srtext"
          },
          {
            "$ref": "#/parameters/rowFilter.spatial_ref_sys.proj4text"
          },
          {
            "$ref": "#/parameters/body.spatial_ref_sys"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "spatial_ref_sys"
        ]
      }
    },
    "/payouts": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.payouts.id"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.barber_id"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.barbershop_id"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.amount"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.currency"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.status"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.bank_name"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.bank_account_number"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.bank_account_name"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.stripe_payout_id"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.stripe_transfer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.period_start"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.period_end"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.bookings_count"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.total_earnings"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.platform_fee"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.paid_at"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.updated_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/payouts"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "summary": "Payouts to barbers/shops",
        "tags": [
          "payouts"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.payouts"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "Payouts to barbers/shops",
        "tags": [
          "payouts"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.payouts.id"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.barber_id"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.barbershop_id"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.amount"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.currency"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.status"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.bank_name"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.bank_account_number"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.bank_account_name"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.stripe_payout_id"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.stripe_transfer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.period_start"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.period_end"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.bookings_count"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.total_earnings"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.platform_fee"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.paid_at"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.updated_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Payouts to barbers/shops",
        "tags": [
          "payouts"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.payouts.id"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.barber_id"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.barbershop_id"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.amount"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.currency"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.status"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.bank_name"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.bank_account_number"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.bank_account_name"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.stripe_payout_id"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.stripe_transfer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.period_start"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.period_end"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.bookings_count"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.total_earnings"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.platform_fee"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.paid_at"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.payouts.updated_at"
          },
          {
            "$ref": "#/parameters/body.payouts"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Payouts to barbers/shops",
        "tags": [
          "payouts"
        ]
      }
    },
    "/otp_requests": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.otp_requests.id"
          },
          {
            "$ref": "#/parameters/rowFilter.otp_requests.phone_number"
          },
          {
            "$ref": "#/parameters/rowFilter.otp_requests.message_sid"
          },
          {
            "$ref": "#/parameters/rowFilter.otp_requests.status"
          },
          {
            "$ref": "#/parameters/rowFilter.otp_requests.created_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/otp_requests"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "summary": "Tracks OTP SMS requests for rate limiting and abuse prevention",
        "tags": [
          "otp_requests"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.otp_requests"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "Tracks OTP SMS requests for rate limiting and abuse prevention",
        "tags": [
          "otp_requests"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.otp_requests.id"
          },
          {
            "$ref": "#/parameters/rowFilter.otp_requests.phone_number"
          },
          {
            "$ref": "#/parameters/rowFilter.otp_requests.message_sid"
          },
          {
            "$ref": "#/parameters/rowFilter.otp_requests.status"
          },
          {
            "$ref": "#/parameters/rowFilter.otp_requests.created_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Tracks OTP SMS requests for rate limiting and abuse prevention",
        "tags": [
          "otp_requests"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.otp_requests.id"
          },
          {
            "$ref": "#/parameters/rowFilter.otp_requests.phone_number"
          },
          {
            "$ref": "#/parameters/rowFilter.otp_requests.message_sid"
          },
          {
            "$ref": "#/parameters/rowFilter.otp_requests.status"
          },
          {
            "$ref": "#/parameters/rowFilter.otp_requests.created_at"
          },
          {
            "$ref": "#/parameters/body.otp_requests"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Tracks OTP SMS requests for rate limiting and abuse prevention",
        "tags": [
          "otp_requests"
        ]
      }
    },
    "/barbershop_onboarding": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.id"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.name"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.description"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.phone"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.email"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.address"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.city"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.state"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.postcode"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.latitude"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.longitude"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.logo_url"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.cover_urls"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.ssm_url"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.license_url"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.operating_hours"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.staff"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.services"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.amenities"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.bank_name"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.bank_account_number"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.bank_account_name"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.status"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.verification_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.reviewed_by"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.submitted_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.approved_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.rejected_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.metadata"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/barbershop_onboarding"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "barbershop_onboarding"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.barbershop_onboarding"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "barbershop_onboarding"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.id"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.name"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.description"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.phone"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.email"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.address"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.city"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.state"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.postcode"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.latitude"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.longitude"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.logo_url"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.cover_urls"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.ssm_url"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.license_url"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.operating_hours"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.staff"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.services"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.amenities"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.bank_name"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.bank_account_number"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.bank_account_name"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.status"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.verification_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.reviewed_by"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.submitted_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.approved_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.rejected_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.metadata"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "barbershop_onboarding"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.id"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.name"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.description"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.phone"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.email"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.address"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.city"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.state"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.postcode"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.latitude"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.longitude"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.logo_url"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.cover_urls"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.ssm_url"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.license_url"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.operating_hours"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.staff"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.services"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.amenities"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.bank_name"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.bank_account_number"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.bank_account_name"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.status"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.verification_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.reviewed_by"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.submitted_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.approved_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.rejected_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barbershop_onboarding.metadata"
          },
          {
            "$ref": "#/parameters/body.barbershop_onboarding"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "barbershop_onboarding"
        ]
      }
    },
    "/barber_onboarding": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.id"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.experience_years"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.specializations"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.bio"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.ic_number"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.ic_front_url"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.ic_back_url"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.selfie_url"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.certificate_urls"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.service_radius_km"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.portfolio_urls"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.base_price"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.availability"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.bank_name"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.bank_account_number"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.bank_account_name"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.status"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.verification_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.reviewed_by"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.submitted_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.approved_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.rejected_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.metadata"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/barber_onboarding"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "barber_onboarding"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.barber_onboarding"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "barber_onboarding"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.id"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.experience_years"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.specializations"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.bio"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.ic_number"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.ic_front_url"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.ic_back_url"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.selfie_url"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.certificate_urls"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.service_radius_km"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.portfolio_urls"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.base_price"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.availability"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.bank_name"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.bank_account_number"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.bank_account_name"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.status"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.verification_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.reviewed_by"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.submitted_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.approved_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.rejected_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.metadata"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "barber_onboarding"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.id"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.experience_years"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.specializations"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.bio"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.ic_number"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.ic_front_url"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.ic_back_url"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.selfie_url"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.certificate_urls"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.service_radius_km"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.portfolio_urls"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.base_price"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.availability"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.bank_name"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.bank_account_number"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.bank_account_name"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.status"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.verification_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.reviewed_by"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.submitted_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.approved_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.rejected_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barber_onboarding.metadata"
          },
          {
            "$ref": "#/parameters/body.barber_onboarding"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "barber_onboarding"
        ]
      }
    },
    "/geometry_columns": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.f_table_catalog"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.f_table_schema"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.f_table_name"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.f_geometry_column"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.coord_dimension"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.srid"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.type"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/geometry_columns"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "geometry_columns"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.geometry_columns"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "geometry_columns"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.f_table_catalog"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.f_table_schema"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.f_table_name"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.f_geometry_column"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.coord_dimension"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.srid"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.type"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "geometry_columns"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.f_table_catalog"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.f_table_schema"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.f_table_name"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.f_geometry_column"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.coord_dimension"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.srid"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.type"
          },
          {
            "$ref": "#/parameters/body.geometry_columns"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "geometry_columns"
        ]
      }
    },
    "/profiles": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.profiles.id"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.role"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.full_name"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.phone_number"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.phone_verified"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.avatar_url"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.date_of_birth"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.gender"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.address_line1"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.address_line2"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.city"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.state"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.postal_code"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.country"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.location"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.language"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.currency"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.timezone"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.is_online"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.last_seen_at"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.fcm_token"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.email"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.email_verified"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.email_verified_at"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.phone_verified_at"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.points_balance"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/profiles"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "summary": "User profiles extending Supabase auth",
        "tags": [
          "profiles"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.profiles"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "User profiles extending Supabase auth",
        "tags": [
          "profiles"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.profiles.id"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.role"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.full_name"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.phone_number"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.phone_verified"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.avatar_url"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.date_of_birth"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.gender"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.address_line1"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.address_line2"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.city"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.state"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.postal_code"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.country"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.location"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.language"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.currency"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.timezone"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.is_online"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.last_seen_at"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.fcm_token"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.email"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.email_verified"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.email_verified_at"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.phone_verified_at"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.points_balance"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "User profiles extending Supabase auth",
        "tags": [
          "profiles"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.profiles.id"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.role"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.full_name"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.phone_number"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.phone_verified"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.avatar_url"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.date_of_birth"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.gender"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.address_line1"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.address_line2"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.city"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.state"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.postal_code"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.country"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.location"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.language"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.currency"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.timezone"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.is_online"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.last_seen_at"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.fcm_token"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.email"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.email_verified"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.email_verified_at"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.phone_verified_at"
          },
          {
            "$ref": "#/parameters/rowFilter.profiles.points_balance"
          },
          {
            "$ref": "#/parameters/body.profiles"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "User profiles extending Supabase auth",
        "tags": [
          "profiles"
        ]
      }
    },
    "/favorites": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.favorites.id"
          },
          {
            "$ref": "#/parameters/rowFilter.favorites.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.favorites.barber_id"
          },
          {
            "$ref": "#/parameters/rowFilter.favorites.barbershop_id"
          },
          {
            "$ref": "#/parameters/rowFilter.favorites.created_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/favorites"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "summary": "User favorites (barbers/shops)",
        "tags": [
          "favorites"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.favorites"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "User favorites (barbers/shops)",
        "tags": [
          "favorites"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.favorites.id"
          },
          {
            "$ref": "#/parameters/rowFilter.favorites.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.favorites.barber_id"
          },
          {
            "$ref": "#/parameters/rowFilter.favorites.barbershop_id"
          },
          {
            "$ref": "#/parameters/rowFilter.favorites.created_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "User favorites (barbers/shops)",
        "tags": [
          "favorites"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.favorites.id"
          },
          {
            "$ref": "#/parameters/rowFilter.favorites.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.favorites.barber_id"
          },
          {
            "$ref": "#/parameters/rowFilter.favorites.barbershop_id"
          },
          {
            "$ref": "#/parameters/rowFilter.favorites.created_at"
          },
          {
            "$ref": "#/parameters/body.favorites"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "User favorites (barbers/shops)",
        "tags": [
          "favorites"
        ]
      }
    },
    "/services": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.services.id"
          },
          {
            "$ref": "#/parameters/rowFilter.services.barber_id"
          },
          {
            "$ref": "#/parameters/rowFilter.services.barbershop_id"
          },
          {
            "$ref": "#/parameters/rowFilter.services.name"
          },
          {
            "$ref": "#/parameters/rowFilter.services.description"
          },
          {
            "$ref": "#/parameters/rowFilter.services.category"
          },
          {
            "$ref": "#/parameters/rowFilter.services.image_url"
          },
          {
            "$ref": "#/parameters/rowFilter.services.price"
          },
          {
            "$ref": "#/parameters/rowFilter.services.duration_minutes"
          },
          {
            "$ref": "#/parameters/rowFilter.services.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.services.is_popular"
          },
          {
            "$ref": "#/parameters/rowFilter.services.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.services.updated_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/services"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "summary": "Services offered by barbers/shops",
        "tags": [
          "services"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.services"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "Services offered by barbers/shops",
        "tags": [
          "services"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.services.id"
          },
          {
            "$ref": "#/parameters/rowFilter.services.barber_id"
          },
          {
            "$ref": "#/parameters/rowFilter.services.barbershop_id"
          },
          {
            "$ref": "#/parameters/rowFilter.services.name"
          },
          {
            "$ref": "#/parameters/rowFilter.services.description"
          },
          {
            "$ref": "#/parameters/rowFilter.services.category"
          },
          {
            "$ref": "#/parameters/rowFilter.services.image_url"
          },
          {
            "$ref": "#/parameters/rowFilter.services.price"
          },
          {
            "$ref": "#/parameters/rowFilter.services.duration_minutes"
          },
          {
            "$ref": "#/parameters/rowFilter.services.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.services.is_popular"
          },
          {
            "$ref": "#/parameters/rowFilter.services.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.services.updated_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Services offered by barbers/shops",
        "tags": [
          "services"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.services.id"
          },
          {
            "$ref": "#/parameters/rowFilter.services.barber_id"
          },
          {
            "$ref": "#/parameters/rowFilter.services.barbershop_id"
          },
          {
            "$ref": "#/parameters/rowFilter.services.name"
          },
          {
            "$ref": "#/parameters/rowFilter.services.description"
          },
          {
            "$ref": "#/parameters/rowFilter.services.category"
          },
          {
            "$ref": "#/parameters/rowFilter.services.image_url"
          },
          {
            "$ref": "#/parameters/rowFilter.services.price"
          },
          {
            "$ref": "#/parameters/rowFilter.services.duration_minutes"
          },
          {
            "$ref": "#/parameters/rowFilter.services.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.services.is_popular"
          },
          {
            "$ref": "#/parameters/rowFilter.services.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.services.updated_at"
          },
          {
            "$ref": "#/parameters/body.services"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Services offered by barbers/shops",
        "tags": [
          "services"
        ]
      }
    },
    "/bookings": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.bookings.id"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.customer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.barber_id"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.barbershop_id"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.booking_number"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.status"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.services"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.scheduled_date"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.scheduled_time"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.scheduled_datetime"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.estimated_duration_minutes"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.service_type"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.customer_address"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.subtotal"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.service_fee"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.travel_fee"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.discount_amount"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.total_price"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.payment_method"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.payment_status"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.paid_at"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.customer_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.barber_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.cancellation_reason"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.accepted_at"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.started_at"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.completed_at"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.cancelled_at"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.rating"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.customer_location"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.customer_address_text"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.customer_location_accuracy"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.barber_location_at_accept"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.barber_location_at_start"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.barber_location_at_complete"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.distance_km"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.estimated_travel_time_minutes"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.tracking_started_at"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.tracking_last_updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.estimated_arrival_time"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.current_distance_km"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.current_eta_minutes"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.barber_arrived_at"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.on_the_way_at"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.arrived_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/bookings"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "summary": "Customer bookings/appointments",
        "tags": [
          "bookings"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.bookings"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "Customer bookings/appointments",
        "tags": [
          "bookings"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.bookings.id"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.customer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.barber_id"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.barbershop_id"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.booking_number"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.status"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.services"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.scheduled_date"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.scheduled_time"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.scheduled_datetime"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.estimated_duration_minutes"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.service_type"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.customer_address"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.subtotal"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.service_fee"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.travel_fee"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.discount_amount"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.total_price"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.payment_method"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.payment_status"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.paid_at"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.customer_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.barber_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.cancellation_reason"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.accepted_at"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.started_at"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.completed_at"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.cancelled_at"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.rating"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.customer_location"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.customer_address_text"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.customer_location_accuracy"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.barber_location_at_accept"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.barber_location_at_start"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.barber_location_at_complete"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.distance_km"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.estimated_travel_time_minutes"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.tracking_started_at"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.tracking_last_updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.estimated_arrival_time"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.current_distance_km"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.current_eta_minutes"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.barber_arrived_at"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.on_the_way_at"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.arrived_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Customer bookings/appointments",
        "tags": [
          "bookings"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.bookings.id"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.customer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.barber_id"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.barbershop_id"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.booking_number"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.status"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.services"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.scheduled_date"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.scheduled_time"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.scheduled_datetime"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.estimated_duration_minutes"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.service_type"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.customer_address"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.subtotal"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.service_fee"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.travel_fee"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.discount_amount"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.total_price"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.payment_method"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.payment_status"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.paid_at"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.customer_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.barber_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.cancellation_reason"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.accepted_at"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.started_at"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.completed_at"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.cancelled_at"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.rating"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.customer_location"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.customer_address_text"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.customer_location_accuracy"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.barber_location_at_accept"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.barber_location_at_start"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.barber_location_at_complete"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.distance_km"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.estimated_travel_time_minutes"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.tracking_started_at"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.tracking_last_updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.estimated_arrival_time"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.current_distance_km"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.current_eta_minutes"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.barber_arrived_at"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.on_the_way_at"
          },
          {
            "$ref": "#/parameters/rowFilter.bookings.arrived_at"
          },
          {
            "$ref": "#/parameters/body.bookings"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Customer bookings/appointments",
        "tags": [
          "bookings"
        ]
      }
    },
    "/booking_vouchers": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.id"
          },
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.booking_id"
          },
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.user_voucher_id"
          },
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.customer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.voucher_code"
          },
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.voucher_title"
          },
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.discount_amount"
          },
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.discount_percent"
          },
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.original_total"
          },
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.discount_applied"
          },
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.final_total"
          },
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.applied_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/booking_vouchers"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "summary": "Tracks voucher usage on bookings with historical discount data",
        "tags": [
          "booking_vouchers"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.booking_vouchers"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "Tracks voucher usage on bookings with historical discount data",
        "tags": [
          "booking_vouchers"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.id"
          },
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.booking_id"
          },
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.user_voucher_id"
          },
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.customer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.voucher_code"
          },
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.voucher_title"
          },
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.discount_amount"
          },
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.discount_percent"
          },
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.original_total"
          },
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.discount_applied"
          },
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.final_total"
          },
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.applied_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Tracks voucher usage on bookings with historical discount data",
        "tags": [
          "booking_vouchers"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.id"
          },
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.booking_id"
          },
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.user_voucher_id"
          },
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.customer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.voucher_code"
          },
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.voucher_title"
          },
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.discount_amount"
          },
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.discount_percent"
          },
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.original_total"
          },
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.discount_applied"
          },
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.final_total"
          },
          {
            "$ref": "#/parameters/rowFilter.booking_vouchers.applied_at"
          },
          {
            "$ref": "#/parameters/body.booking_vouchers"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Tracks voucher usage on bookings with historical discount data",
        "tags": [
          "booking_vouchers"
        ]
      }
    },
    "/active_tracking_sessions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.active_tracking_sessions.booking_id"
          },
          {
            "$ref": "#/parameters/rowFilter.active_tracking_sessions.customer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.active_tracking_sessions.barber_id"
          },
          {
            "$ref": "#/parameters/rowFilter.active_tracking_sessions.status"
          },
          {
            "$ref": "#/parameters/rowFilter.active_tracking_sessions.tracking_started_at"
          },
          {
            "$ref": "#/parameters/rowFilter.active_tracking_sessions.tracking_last_updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.active_tracking_sessions.current_distance_km"
          },
          {
            "$ref": "#/parameters/rowFilter.active_tracking_sessions.current_eta_minutes"
          },
          {
            "$ref": "#/parameters/rowFilter.active_tracking_sessions.estimated_arrival_time"
          },
          {
            "$ref": "#/parameters/rowFilter.active_tracking_sessions.barber_location"
          },
          {
            "$ref": "#/parameters/rowFilter.active_tracking_sessions.barber_profile_updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.active_tracking_sessions.minutes_since_last_update"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/active_tracking_sessions"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "summary": "Shows all currently active tracking sessions with real-time data",
        "tags": [
          "active_tracking_sessions"
        ]
      }
    },
    "/barbers": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.barbers.id"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.business_name"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.bio"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.experience_years"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.specializations"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.portfolio_images"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.verification_status"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.verification_documents"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.ic_number"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.ssm_number"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.rating"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.total_reviews"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.total_bookings"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.completed_bookings"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.is_available"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.working_hours"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.service_radius_km"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.base_price"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.travel_fee_per_km"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.bank_name"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.bank_account_number"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.bank_account_name"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.is_featured"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.is_verified"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.stripe_account_id"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.last_radius_change_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/barbers"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "summary": "Freelance barbers/stylists",
        "tags": [
          "barbers"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.barbers"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "Freelance barbers/stylists",
        "tags": [
          "barbers"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.barbers.id"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.business_name"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.bio"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.experience_years"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.specializations"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.portfolio_images"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.verification_status"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.verification_documents"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.ic_number"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.ssm_number"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.rating"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.total_reviews"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.total_bookings"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.completed_bookings"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.is_available"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.working_hours"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.service_radius_km"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.base_price"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.travel_fee_per_km"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.bank_name"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.bank_account_number"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.bank_account_name"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.is_featured"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.is_verified"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.stripe_account_id"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.last_radius_change_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Freelance barbers/stylists",
        "tags": [
          "barbers"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.barbers.id"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.business_name"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.bio"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.experience_years"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.specializations"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.portfolio_images"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.verification_status"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.verification_documents"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.ic_number"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.ssm_number"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.rating"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.total_reviews"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.total_bookings"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.completed_bookings"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.is_available"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.working_hours"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.service_radius_km"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.base_price"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.travel_fee_per_km"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.bank_name"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.bank_account_number"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.bank_account_name"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.is_featured"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.is_verified"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.stripe_account_id"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.barbers.last_radius_change_at"
          },
          {
            "$ref": "#/parameters/body.barbers"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Freelance barbers/stylists",
        "tags": [
          "barbers"
        ]
      }
    },
    "/geography_columns": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.geography_columns.f_table_catalog"
          },
          {
            "$ref": "#/parameters/rowFilter.geography_columns.f_table_schema"
          },
          {
            "$ref": "#/parameters/rowFilter.geography_columns.f_table_name"
          },
          {
            "$ref": "#/parameters/rowFilter.geography_columns.f_geography_column"
          },
          {
            "$ref": "#/parameters/rowFilter.geography_columns.coord_dimension"
          },
          {
            "$ref": "#/parameters/rowFilter.geography_columns.srid"
          },
          {
            "$ref": "#/parameters/rowFilter.geography_columns.type"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/geography_columns"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "geography_columns"
        ]
      }
    },
    "/user_vouchers": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.user_vouchers.id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_vouchers.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_vouchers.voucher_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_vouchers.redeemed_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_vouchers.points_spent"
          },
          {
            "$ref": "#/parameters/rowFilter.user_vouchers.status"
          },
          {
            "$ref": "#/parameters/rowFilter.user_vouchers.used_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_vouchers.used_for_booking_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_vouchers.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_vouchers.updated_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/user_vouchers"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "summary": "User-redeemed vouchers from rewards program",
        "tags": [
          "user_vouchers"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.user_vouchers"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "User-redeemed vouchers from rewards program",
        "tags": [
          "user_vouchers"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.user_vouchers.id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_vouchers.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_vouchers.voucher_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_vouchers.redeemed_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_vouchers.points_spent"
          },
          {
            "$ref": "#/parameters/rowFilter.user_vouchers.status"
          },
          {
            "$ref": "#/parameters/rowFilter.user_vouchers.used_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_vouchers.used_for_booking_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_vouchers.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_vouchers.updated_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "User-redeemed vouchers from rewards program",
        "tags": [
          "user_vouchers"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.user_vouchers.id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_vouchers.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_vouchers.voucher_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_vouchers.redeemed_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_vouchers.points_spent"
          },
          {
            "$ref": "#/parameters/rowFilter.user_vouchers.status"
          },
          {
            "$ref": "#/parameters/rowFilter.user_vouchers.used_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_vouchers.used_for_booking_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_vouchers.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_vouchers.updated_at"
          },
          {
            "$ref": "#/parameters/body.user_vouchers"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "User-redeemed vouchers from rewards program",
        "tags": [
          "user_vouchers"
        ]
      }
    },
    "/credit_transactions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.credit_transactions.id"
          },
          {
            "$ref": "#/parameters/rowFilter.credit_transactions.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.credit_transactions.type"
          },
          {
            "$ref": "#/parameters/rowFilter.credit_transactions.source"
          },
          {
            "$ref": "#/parameters/rowFilter.credit_transactions.amount"
          },
          {
            "$ref": "#/parameters/rowFilter.credit_transactions.balance_after"
          },
          {
            "$ref": "#/parameters/rowFilter.credit_transactions.description"
          },
          {
            "$ref": "#/parameters/rowFilter.credit_transactions.booking_id"
          },
          {
            "$ref": "#/parameters/rowFilter.credit_transactions.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.credit_transactions.created_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/credit_transactions"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "summary": "Transaction log for all credit additions and deductions",
        "tags": [
          "credit_transactions"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.credit_transactions"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "Transaction log for all credit additions and deductions",
        "tags": [
          "credit_transactions"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.credit_transactions.id"
          },
          {
            "$ref": "#/parameters/rowFilter.credit_transactions.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.credit_transactions.type"
          },
          {
            "$ref": "#/parameters/rowFilter.credit_transactions.source"
          },
          {
            "$ref": "#/parameters/rowFilter.credit_transactions.amount"
          },
          {
            "$ref": "#/parameters/rowFilter.credit_transactions.balance_after"
          },
          {
            "$ref": "#/parameters/rowFilter.credit_transactions.description"
          },
          {
            "$ref": "#/parameters/rowFilter.credit_transactions.booking_id"
          },
          {
            "$ref": "#/parameters/rowFilter.credit_transactions.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.credit_transactions.created_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Transaction log for all credit additions and deductions",
        "tags": [
          "credit_transactions"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.credit_transactions.id"
          },
          {
            "$ref": "#/parameters/rowFilter.credit_transactions.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.credit_transactions.type"
          },
          {
            "$ref": "#/parameters/rowFilter.credit_transactions.source"
          },
          {
            "$ref": "#/parameters/rowFilter.credit_transactions.amount"
          },
          {
            "$ref": "#/parameters/rowFilter.credit_transactions.balance_after"
          },
          {
            "$ref": "#/parameters/rowFilter.credit_transactions.description"
          },
          {
            "$ref": "#/parameters/rowFilter.credit_transactions.booking_id"
          },
          {
            "$ref": "#/parameters/rowFilter.credit_transactions.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.credit_transactions.created_at"
          },
          {
            "$ref": "#/parameters/body.credit_transactions"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Transaction log for all credit additions and deductions",
        "tags": [
          "credit_transactions"
        ]
      }
    },
    "/points_transactions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.points_transactions.id"
          },
          {
            "$ref": "#/parameters/rowFilter.points_transactions.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.points_transactions.type"
          },
          {
            "$ref": "#/parameters/rowFilter.points_transactions.amount"
          },
          {
            "$ref": "#/parameters/rowFilter.points_transactions.balance_after"
          },
          {
            "$ref": "#/parameters/rowFilter.points_transactions.description"
          },
          {
            "$ref": "#/parameters/rowFilter.points_transactions.booking_id"
          },
          {
            "$ref": "#/parameters/rowFilter.points_transactions.voucher_id"
          },
          {
            "$ref": "#/parameters/rowFilter.points_transactions.user_voucher_id"
          },
          {
            "$ref": "#/parameters/rowFilter.points_transactions.admin_id"
          },
          {
            "$ref": "#/parameters/rowFilter.points_transactions.admin_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.points_transactions.created_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/points_transactions"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "summary": "Complete history of all points transactions",
        "tags": [
          "points_transactions"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.points_transactions"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "Complete history of all points transactions",
        "tags": [
          "points_transactions"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.points_transactions.id"
          },
          {
            "$ref": "#/parameters/rowFilter.points_transactions.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.points_transactions.type"
          },
          {
            "$ref": "#/parameters/rowFilter.points_transactions.amount"
          },
          {
            "$ref": "#/parameters/rowFilter.points_transactions.balance_after"
          },
          {
            "$ref": "#/parameters/rowFilter.points_transactions.description"
          },
          {
            "$ref": "#/parameters/rowFilter.points_transactions.booking_id"
          },
          {
            "$ref": "#/parameters/rowFilter.points_transactions.voucher_id"
          },
          {
            "$ref": "#/parameters/rowFilter.points_transactions.user_voucher_id"
          },
          {
            "$ref": "#/parameters/rowFilter.points_transactions.admin_id"
          },
          {
            "$ref": "#/parameters/rowFilter.points_transactions.admin_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.points_transactions.created_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Complete history of all points transactions",
        "tags": [
          "points_transactions"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.points_transactions.id"
          },
          {
            "$ref": "#/parameters/rowFilter.points_transactions.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.points_transactions.type"
          },
          {
            "$ref": "#/parameters/rowFilter.points_transactions.amount"
          },
          {
            "$ref": "#/parameters/rowFilter.points_transactions.balance_after"
          },
          {
            "$ref": "#/parameters/rowFilter.points_transactions.description"
          },
          {
            "$ref": "#/parameters/rowFilter.points_transactions.booking_id"
          },
          {
            "$ref": "#/parameters/rowFilter.points_transactions.voucher_id"
          },
          {
            "$ref": "#/parameters/rowFilter.points_transactions.user_voucher_id"
          },
          {
            "$ref": "#/parameters/rowFilter.points_transactions.admin_id"
          },
          {
            "$ref": "#/parameters/rowFilter.points_transactions.admin_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.points_transactions.created_at"
          },
          {
            "$ref": "#/parameters/body.points_transactions"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Complete history of all points transactions",
        "tags": [
          "points_transactions"
        ]
      }
    },
    "/messages": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.messages.id"
          },
          {
            "$ref": "#/parameters/rowFilter.messages.sender_id"
          },
          {
            "$ref": "#/parameters/rowFilter.messages.receiver_id"
          },
          {
            "$ref": "#/parameters/rowFilter.messages.booking_id"
          },
          {
            "$ref": "#/parameters/rowFilter.messages.message_type"
          },
          {
            "$ref": "#/parameters/rowFilter.messages.content"
          },
          {
            "$ref": "#/parameters/rowFilter.messages.image_url"
          },
          {
            "$ref": "#/parameters/rowFilter.messages.location_data"
          },
          {
            "$ref": "#/parameters/rowFilter.messages.is_read"
          },
          {
            "$ref": "#/parameters/rowFilter.messages.read_at"
          },
          {
            "$ref": "#/parameters/rowFilter.messages.created_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/messages"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "summary": "In-app chat messages",
        "tags": [
          "messages"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.messages"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "In-app chat messages",
        "tags": [
          "messages"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.messages.id"
          },
          {
            "$ref": "#/parameters/rowFilter.messages.sender_id"
          },
          {
            "$ref": "#/parameters/rowFilter.messages.receiver_id"
          },
          {
            "$ref": "#/parameters/rowFilter.messages.booking_id"
          },
          {
            "$ref": "#/parameters/rowFilter.messages.message_type"
          },
          {
            "$ref": "#/parameters/rowFilter.messages.content"
          },
          {
            "$ref": "#/parameters/rowFilter.messages.image_url"
          },
          {
            "$ref": "#/parameters/rowFilter.messages.location_data"
          },
          {
            "$ref": "#/parameters/rowFilter.messages.is_read"
          },
          {
            "$ref": "#/parameters/rowFilter.messages.read_at"
          },
          {
            "$ref": "#/parameters/rowFilter.messages.created_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "In-app chat messages",
        "tags": [
          "messages"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.messages.id"
          },
          {
            "$ref": "#/parameters/rowFilter.messages.sender_id"
          },
          {
            "$ref": "#/parameters/rowFilter.messages.receiver_id"
          },
          {
            "$ref": "#/parameters/rowFilter.messages.booking_id"
          },
          {
            "$ref": "#/parameters/rowFilter.messages.message_type"
          },
          {
            "$ref": "#/parameters/rowFilter.messages.content"
          },
          {
            "$ref": "#/parameters/rowFilter.messages.image_url"
          },
          {
            "$ref": "#/parameters/rowFilter.messages.location_data"
          },
          {
            "$ref": "#/parameters/rowFilter.messages.is_read"
          },
          {
            "$ref": "#/parameters/rowFilter.messages.read_at"
          },
          {
            "$ref": "#/parameters/rowFilter.messages.created_at"
          },
          {
            "$ref": "#/parameters/body.messages"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "In-app chat messages",
        "tags": [
          "messages"
        ]
      }
    },
    "/vouchers": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.vouchers.id"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.code"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.title"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.description"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.type"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.value"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.points_cost"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.max_redemptions"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.current_redemptions"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.max_per_user"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.min_spend"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.max_discount"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.applicable_services"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.valid_from"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.valid_until"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.created_by"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.is_featured"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.updated_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/vouchers"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "summary": "Platform-created vouchers for rewards program",
        "tags": [
          "vouchers"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.vouchers"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "Platform-created vouchers for rewards program",
        "tags": [
          "vouchers"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.vouchers.id"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.code"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.title"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.description"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.type"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.value"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.points_cost"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.max_redemptions"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.current_redemptions"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.max_per_user"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.min_spend"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.max_discount"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.applicable_services"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.valid_from"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.valid_until"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.created_by"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.is_featured"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.updated_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Platform-created vouchers for rewards program",
        "tags": [
          "vouchers"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.vouchers.id"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.code"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.title"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.description"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.type"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.value"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.points_cost"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.max_redemptions"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.current_redemptions"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.max_per_user"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.min_spend"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.max_discount"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.applicable_services"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.valid_from"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.valid_until"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.created_by"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.is_featured"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.vouchers.updated_at"
          },
          {
            "$ref": "#/parameters/body.vouchers"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Platform-created vouchers for rewards program",
        "tags": [
          "vouchers"
        ]
      }
    },
    "/customer_addresses": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.id"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.label"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.address_line1"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.address_line2"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.city"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.state"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.postal_code"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.country"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.is_default"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.building_name"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.floor"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.unit_number"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.delivery_instructions"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.contact_number"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.address_type"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.landmark"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.gps_accuracy"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.last_used_at"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.location"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.latitude"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.longitude"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.location_updated_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/customer_addresses"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "customer_addresses"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.customer_addresses"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "customer_addresses"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.id"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.label"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.address_line1"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.address_line2"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.city"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.state"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.postal_code"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.country"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.is_default"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.building_name"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.floor"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.unit_number"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.delivery_instructions"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.contact_number"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.address_type"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.landmark"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.gps_accuracy"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.last_used_at"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.location"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.latitude"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.longitude"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.location_updated_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "customer_addresses"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.id"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.label"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.address_line1"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.address_line2"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.city"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.state"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.postal_code"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.country"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.is_default"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.building_name"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.floor"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.unit_number"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.delivery_instructions"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.contact_number"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.address_type"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.landmark"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.gps_accuracy"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.last_used_at"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.location"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.latitude"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.longitude"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_addresses.location_updated_at"
          },
          {
            "$ref": "#/parameters/body.customer_addresses"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "customer_addresses"
        ]
      }
    },
    "/customer_credits": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.customer_credits.id"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_credits.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_credits.balance"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_credits.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_credits.updated_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/customer_credits"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "summary": "Customer credit balances for instant refunds and promotions",
        "tags": [
          "customer_credits"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.customer_credits"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "Customer credit balances for instant refunds and promotions",
        "tags": [
          "customer_credits"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.customer_credits.id"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_credits.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_credits.balance"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_credits.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_credits.updated_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Customer credit balances for instant refunds and promotions",
        "tags": [
          "customer_credits"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.customer_credits.id"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_credits.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_credits.balance"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_credits.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_credits.updated_at"
          },
          {
            "$ref": "#/parameters/body.customer_credits"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Customer credit balances for instant refunds and promotions",
        "tags": [
          "customer_credits"
        ]
      }
    },
    "/route_cache": {
      "get": {
        "description": "Routes expire after 7 days by default to account for traffic pattern changes.\nCoordinates are rounded to 3 decimals (~100m) for better cache hit rate.",
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.route_cache.id"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.origin_lat"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.origin_lng"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.destination_lat"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.destination_lng"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.distance_km"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.duration_minutes"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.profile"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.traffic_profile"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.last_used_at"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.hit_count"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.expires_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/route_cache"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "summary": "Caches Mapbox Directions API results to reduce API calls. ",
        "tags": [
          "route_cache"
        ]
      },
      "post": {
        "description": "Routes expire after 7 days by default to account for traffic pattern changes.\nCoordinates are rounded to 3 decimals (~100m) for better cache hit rate.",
        "parameters": [
          {
            "$ref": "#/parameters/body.route_cache"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "Caches Mapbox Directions API results to reduce API calls. ",
        "tags": [
          "route_cache"
        ]
      },
      "delete": {
        "description": "Routes expire after 7 days by default to account for traffic pattern changes.\nCoordinates are rounded to 3 decimals (~100m) for better cache hit rate.",
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.route_cache.id"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.origin_lat"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.origin_lng"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.destination_lat"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.destination_lng"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.distance_km"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.duration_minutes"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.profile"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.traffic_profile"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.last_used_at"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.hit_count"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.expires_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Caches Mapbox Directions API results to reduce API calls. ",
        "tags": [
          "route_cache"
        ]
      },
      "patch": {
        "description": "Routes expire after 7 days by default to account for traffic pattern changes.\nCoordinates are rounded to 3 decimals (~100m) for better cache hit rate.",
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.route_cache.id"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.origin_lat"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.origin_lng"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.destination_lat"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.destination_lng"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.distance_km"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.duration_minutes"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.profile"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.traffic_profile"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.last_used_at"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.hit_count"
          },
          {
            "$ref": "#/parameters/rowFilter.route_cache.expires_at"
          },
          {
            "$ref": "#/parameters/body.route_cache"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Caches Mapbox Directions API results to reduce API calls. ",
        "tags": [
          "route_cache"
        ]
      }
    },
    "/reviews": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.reviews.id"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.booking_id"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.customer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.barber_id"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.barbershop_id"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.rating"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.comment"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.images"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.response"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.response_at"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.is_verified"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.is_flagged"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.is_visible"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.updated_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/reviews"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "summary": "Customer reviews and ratings",
        "tags": [
          "reviews"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.reviews"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "Customer reviews and ratings",
        "tags": [
          "reviews"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.reviews.id"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.booking_id"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.customer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.barber_id"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.barbershop_id"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.rating"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.comment"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.images"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.response"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.response_at"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.is_verified"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.is_flagged"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.is_visible"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.updated_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Customer reviews and ratings",
        "tags": [
          "reviews"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.reviews.id"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.booking_id"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.customer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.barber_id"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.barbershop_id"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.rating"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.comment"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.images"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.response"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.response_at"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.is_verified"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.is_flagged"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.is_visible"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.reviews.updated_at"
          },
          {
            "$ref": "#/parameters/body.reviews"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Customer reviews and ratings",
        "tags": [
          "reviews"
        ]
      }
    },
    "/onboarding_verification_logs": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.onboarding_verification_logs.id"
          },
          {
            "$ref": "#/parameters/rowFilter.onboarding_verification_logs.application_id"
          },
          {
            "$ref": "#/parameters/rowFilter.onboarding_verification_logs.application_type"
          },
          {
            "$ref": "#/parameters/rowFilter.onboarding_verification_logs.action"
          },
          {
            "$ref": "#/parameters/rowFilter.onboarding_verification_logs.status"
          },
          {
            "$ref": "#/parameters/rowFilter.onboarding_verification_logs.notes"
          },
          {
            "$ref": "#/parameters/rowFilter.onboarding_verification_logs.reviewer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.onboarding_verification_logs.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.onboarding_verification_logs.metadata"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/onboarding_verification_logs"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "onboarding_verification_logs"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.onboarding_verification_logs"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "onboarding_verification_logs"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.onboarding_verification_logs.id"
          },
          {
            "$ref": "#/parameters/rowFilter.onboarding_verification_logs.application_id"
          },
          {
            "$ref": "#/parameters/rowFilter.onboarding_verification_logs.application_type"
          },
          {
            "$ref": "#/parameters/rowFilter.onboarding_verification_logs.action"
          },
          {
            "$ref": "#/parameters/rowFilter.onboarding_verification_logs.status"
          },
          {
            "$ref": "#/parameters/rowFilter.onboarding_verification_logs.notes"
          },
          {
            "$ref": "#/parameters/rowFilter.onboarding_verification_logs.reviewer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.onboarding_verification_logs.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.onboarding_verification_logs.metadata"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "onboarding_verification_logs"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.onboarding_verification_logs.id"
          },
          {
            "$ref": "#/parameters/rowFilter.onboarding_verification_logs.application_id"
          },
          {
            "$ref": "#/parameters/rowFilter.onboarding_verification_logs.application_type"
          },
          {
            "$ref": "#/parameters/rowFilter.onboarding_verification_logs.action"
          },
          {
            "$ref": "#/parameters/rowFilter.onboarding_verification_logs.status"
          },
          {
            "$ref": "#/parameters/rowFilter.onboarding_verification_logs.notes"
          },
          {
            "$ref": "#/parameters/rowFilter.onboarding_verification_logs.reviewer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.onboarding_verification_logs.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.onboarding_verification_logs.metadata"
          },
          {
            "$ref": "#/parameters/body.onboarding_verification_logs"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "onboarding_verification_logs"
        ]
      }
    },
    "/notifications": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.notifications.id"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.type"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.title"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.body"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.image_url"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.action_url"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.action_data"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.is_read"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.read_at"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.is_sent"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.sent_at"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.created_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/notifications"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "summary": "Push and in-app notifications",
        "tags": [
          "notifications"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.notifications"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "Push and in-app notifications",
        "tags": [
          "notifications"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.notifications.id"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.type"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.title"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.body"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.image_url"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.action_url"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.action_data"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.is_read"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.read_at"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.is_sent"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.sent_at"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.created_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Push and in-app notifications",
        "tags": [
          "notifications"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.notifications.id"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.type"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.title"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.body"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.image_url"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.action_url"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.action_data"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.is_read"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.read_at"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.is_sent"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.sent_at"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.created_at"
          },
          {
            "$ref": "#/parameters/body.notifications"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Push and in-app notifications",
        "tags": [
          "notifications"
        ]
      }
    },
    "/user_booking_stats": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.user_booking_stats.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_booking_stats.total_bookings"
          },
          {
            "$ref": "#/parameters/rowFilter.user_booking_stats.completed_bookings"
          },
          {
            "$ref": "#/parameters/rowFilter.user_booking_stats.cancelled_bookings"
          },
          {
            "$ref": "#/parameters/rowFilter.user_booking_stats.avg_rating"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/user_booking_stats"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "user_booking_stats"
        ]
      }
    },
    "/promo_codes": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.promo_codes.id"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.code"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.description"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.discount_type"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.discount_value"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.max_discount_amount"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.usage_limit"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.usage_count"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.per_user_limit"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.min_order_amount"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.valid_from"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.valid_until"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.applicable_to"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.updated_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/promo_codes"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "summary": "Promotional discount codes",
        "tags": [
          "promo_codes"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.promo_codes"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "Promotional discount codes",
        "tags": [
          "promo_codes"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.promo_codes.id"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.code"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.description"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.discount_type"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.discount_value"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.max_discount_amount"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.usage_limit"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.usage_count"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.per_user_limit"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.min_order_amount"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.valid_from"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.valid_until"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.applicable_to"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.updated_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Promotional discount codes",
        "tags": [
          "promo_codes"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.promo_codes.id"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.code"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.description"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.discount_type"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.discount_value"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.max_discount_amount"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.usage_limit"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.usage_count"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.per_user_limit"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.min_order_amount"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.valid_from"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.valid_until"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.applicable_to"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.promo_codes.updated_at"
          },
          {
            "$ref": "#/parameters/body.promo_codes"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Promotional discount codes",
        "tags": [
          "promo_codes"
        ]
      }
    },
    "/rpc/st_linetocurve": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geometry",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomANoncircular - Converts a linear geometry to a curved geometry.",
        "tags": [
          "(rpc) st_linetocurve"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geomANoncircular - Converts a linear geometry to a curved geometry.",
              "properties": {
                "geometry": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geometry"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomANoncircular - Converts a linear geometry to a curved geometry.",
        "tags": [
          "(rpc) st_linetocurve"
        ]
      }
    },
    "/rpc/st_swapordinates": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "cstring",
            "in": "query",
            "name": "ords",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, ords - Returns a version of the given geometry with given ordinate values swapped.",
        "tags": [
          "(rpc) st_swapordinates"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom, ords - Returns a version of the given geometry with given ordinate values swapped.",
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "ords": {
                  "format": "cstring",
                  "type": "string"
                }
              },
              "required": [
                "geom",
                "ords"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, ords - Returns a version of the given geometry with given ordinate values swapped.",
        "tags": [
          "(rpc) st_swapordinates"
        ]
      }
    },
    "/rpc/is_admin": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) is_admin"
        ]
      }
    },
    "/rpc/postgis_libprotobuf_version": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_libprotobuf_version"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_libprotobuf_version"
        ]
      }
    },
    "/rpc/st_wrapx": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "wrap",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "move",
            "required": true,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, wrap, move - Wrap a geometry around an X value.",
        "tags": [
          "(rpc) st_wrapx"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom, wrap, move - Wrap a geometry around an X value.",
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "move": {
                  "format": "double precision",
                  "type": "number"
                },
                "wrap": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geom",
                "wrap",
                "move"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, wrap, move - Wrap a geometry around an X value.",
        "tags": [
          "(rpc) st_wrapx"
        ]
      }
    },
    "/rpc/st_quantizecoordinates": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "g",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "prec_x",
            "required": true,
            "type": "integer"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "prec_y",
            "required": false,
            "type": "integer"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "prec_z",
            "required": false,
            "type": "integer"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "prec_m",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g, prec_x, prec_y, prec_z, prec_m - Sets least significant bits of coordinates to zero",
        "tags": [
          "(rpc) st_quantizecoordinates"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g, prec_x, prec_y, prec_z, prec_m - Sets least significant bits of coordinates to zero",
              "properties": {
                "g": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "prec_m": {
                  "format": "integer",
                  "type": "integer"
                },
                "prec_x": {
                  "format": "integer",
                  "type": "integer"
                },
                "prec_y": {
                  "format": "integer",
                  "type": "integer"
                },
                "prec_z": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "required": [
                "g",
                "prec_x"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g, prec_x, prec_y, prec_z, prec_m - Sets least significant bits of coordinates to zero",
        "tags": [
          "(rpc) st_quantizecoordinates"
        ]
      }
    },
    "/rpc/st_closestpoint": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom1, geom2 - Returns the 2D point on g1 that is closest to g2. This is the first point of the shortest line from one geometry to the other.",
        "tags": [
          "(rpc) st_closestpoint"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom1, geom2 - Returns the 2D point on g1 that is closest to g2. This is the first point of the shortest line from one geometry to the other.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom1, geom2 - Returns the 2D point on g1 that is closest to g2. This is the first point of the shortest line from one geometry to the other.",
        "tags": [
          "(rpc) st_closestpoint"
        ]
      }
    },
    "/rpc/set_default_customer_address": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "p_address_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "p_customer_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "p_address_id",
                "p_customer_id"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) set_default_customer_address"
        ]
      }
    },
    "/rpc/st_linelocatepoint": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: a_linestring, a_point - Returns the fractional location of the closest point on a line to a point.",
        "tags": [
          "(rpc) st_linelocatepoint"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: a_linestring, a_point - Returns the fractional location of the closest point on a line to a point.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: a_linestring, a_point - Returns the fractional location of the closest point on a line to a point.",
        "tags": [
          "(rpc) st_linelocatepoint"
        ]
      }
    },
    "/rpc/st_maximuminscribedcircle": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom - Computes the largest circle contained within a geometry.",
        "tags": [
          "(rpc) st_maximuminscribedcircle"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom - Computes the largest circle contained within a geometry.",
              "properties": {
                "": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom - Computes the largest circle contained within a geometry.",
        "tags": [
          "(rpc) st_maximuminscribedcircle"
        ]
      }
    },
    "/rpc/st_collect": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2 - Creates a GeometryCollection or Multi* geometry from a set of geometries.",
        "tags": [
          "(rpc) st_collect"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1, g2 - Creates a GeometryCollection or Multi* geometry from a set of geometries.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2 - Creates a GeometryCollection or Multi* geometry from a set of geometries.",
        "tags": [
          "(rpc) st_collect"
        ]
      }
    },
    "/rpc/st_distance": {
      "get": {
        "parameters": [
          {
            "format": "public.geography",
            "in": "query",
            "name": "geog1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geography",
            "in": "query",
            "name": "geog2",
            "required": true,
            "type": "string"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "use_spheroid",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geog1, geog2, use_spheroid=true - Returns the distance between two geometry or geography values.",
        "tags": [
          "(rpc) st_distance"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geog1, geog2, use_spheroid=true - Returns the distance between two geometry or geography values.",
              "properties": {
                "geog1": {
                  "format": "public.geography",
                  "type": "string"
                },
                "geog2": {
                  "format": "public.geography",
                  "type": "string"
                },
                "use_spheroid": {
                  "format": "boolean",
                  "type": "boolean"
                }
              },
              "required": [
                "geog1",
                "geog2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geog1, geog2, use_spheroid=true - Returns the distance between two geometry or geography values.",
        "tags": [
          "(rpc) st_distance"
        ]
      }
    },
    "/rpc/st_multipointfromwkb": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_multipointfromwkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_multipointfromwkb"
        ]
      }
    },
    "/rpc/st_srid": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1 - Returns the spatial reference identifier for a geometry.",
        "tags": [
          "(rpc) st_srid"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1 - Returns the spatial reference identifier for a geometry.",
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1 - Returns the spatial reference identifier for a geometry.",
        "tags": [
          "(rpc) st_srid"
        ]
      }
    },
    "/rpc/longtransactionsenabled": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) longtransactionsenabled"
        ]
      }
    },
    "/rpc/st_letters": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "letters",
            "required": true,
            "type": "string"
          },
          {
            "format": "json",
            "in": "query",
            "name": "font",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args:  letters,  font - Returns the input letters rendered as geometry with a default start position at the origin and default text height of 100.",
        "tags": [
          "(rpc) st_letters"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args:  letters,  font - Returns the input letters rendered as geometry with a default start position at the origin and default text height of 100.",
              "properties": {
                "font": {
                  "format": "json"
                },
                "letters": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "letters"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args:  letters,  font - Returns the input letters rendered as geometry with a default start position at the origin and default text height of 100.",
        "tags": [
          "(rpc) st_letters"
        ]
      }
    },
    "/rpc/st_buffer": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "radius",
            "required": true,
            "type": "number"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "quadsegs",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, radius_of_buffer, num_seg_quarter_circle - Computes a geometry covering all points within a given distance from a geometry.",
        "tags": [
          "(rpc) st_buffer"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1, radius_of_buffer, num_seg_quarter_circle - Computes a geometry covering all points within a given distance from a geometry.",
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "quadsegs": {
                  "format": "integer",
                  "type": "integer"
                },
                "radius": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geom",
                "radius",
                "quadsegs"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, radius_of_buffer, num_seg_quarter_circle - Computes a geometry covering all points within a given distance from a geometry.",
        "tags": [
          "(rpc) st_buffer"
        ]
      }
    },
    "/rpc/unlockrows": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: auth_token - Removes all locks held by an authorization token.",
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: auth_token - Removes all locks held by an authorization token.",
        "tags": [
          "(rpc) unlockrows"
        ]
      }
    },
    "/rpc/geometry_overbelow": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_overbelow"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_overbelow"
        ]
      }
    },
    "/rpc/st_azimuth": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: origin, target - Returns the north-based azimuth of a line between two points.",
        "tags": [
          "(rpc) st_azimuth"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: origin, target - Returns the north-based azimuth of a line between two points.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: origin, target - Returns the north-based azimuth of a line between two points.",
        "tags": [
          "(rpc) st_azimuth"
        ]
      }
    },
    "/rpc/st_scale": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "origin",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, factor, origin - Scales a geometry by given factors.",
        "tags": [
          "(rpc) st_scale"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom, factor, origin - Scales a geometry by given factors.",
              "properties": {
                "": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "origin": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "",
                "",
                "origin"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, factor, origin - Scales a geometry by given factors.",
        "tags": [
          "(rpc) st_scale"
        ]
      }
    },
    "/rpc/_st_3dintersects": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_3dintersects"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_3dintersects"
        ]
      }
    },
    "/rpc/st_delaunaytriangles": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "g1",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "tolerance",
            "required": false,
            "type": "number"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "flags",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, tolerance, flags - Returns the Delaunay triangulation of the vertices of a geometry.",
        "tags": [
          "(rpc) st_delaunaytriangles"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1, tolerance, flags - Returns the Delaunay triangulation of the vertices of a geometry.",
              "properties": {
                "flags": {
                  "format": "integer",
                  "type": "integer"
                },
                "g1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "tolerance": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "g1"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, tolerance, flags - Returns the Delaunay triangulation of the vertices of a geometry.",
        "tags": [
          "(rpc) st_delaunaytriangles"
        ]
      }
    },
    "/rpc/st_voronoilines": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "g1",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "tolerance",
            "required": false,
            "type": "number"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "extend_to",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, tolerance, extend_to - Returns the boundaries of the Voronoi diagram of the vertices of a geometry.",
        "tags": [
          "(rpc) st_voronoilines"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1, tolerance, extend_to - Returns the boundaries of the Voronoi diagram of the vertices of a geometry.",
              "properties": {
                "extend_to": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "g1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "tolerance": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "g1"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, tolerance, extend_to - Returns the boundaries of the Voronoi diagram of the vertices of a geometry.",
        "tags": [
          "(rpc) st_voronoilines"
        ]
      }
    },
    "/rpc/generate_booking_number": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) generate_booking_number"
        ]
      }
    },
    "/rpc/_st_contains": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_contains"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_contains"
        ]
      }
    },
    "/rpc/dropgeometrytable": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: catalog_name, schema_name, table_name - Drops a table and all its references in geometry_columns.",
              "properties": {
                "catalog_name": {
                  "format": "character varying",
                  "type": "string"
                },
                "schema_name": {
                  "format": "character varying",
                  "type": "string"
                },
                "table_name": {
                  "format": "character varying",
                  "type": "string"
                }
              },
              "required": [
                "catalog_name",
                "schema_name",
                "table_name"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: catalog_name, schema_name, table_name - Drops a table and all its references in geometry_columns.",
        "tags": [
          "(rpc) dropgeometrytable"
        ]
      }
    },
    "/rpc/addauth": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: auth_token - Adds an authorization token to be used in the current transaction.",
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: auth_token - Adds an authorization token to be used in the current transaction.",
        "tags": [
          "(rpc) addauth"
        ]
      }
    },
    "/rpc/st_expand": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "dx",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "dy",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "dz",
            "required": false,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "dm",
            "required": false,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, dx, dy, dz=0, dm=0 - Returns a bounding box expanded from another bounding box or a geometry.",
        "tags": [
          "(rpc) st_expand"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom, dx, dy, dz=0, dm=0 - Returns a bounding box expanded from another bounding box or a geometry.",
              "properties": {
                "dm": {
                  "format": "double precision",
                  "type": "number"
                },
                "dx": {
                  "format": "double precision",
                  "type": "number"
                },
                "dy": {
                  "format": "double precision",
                  "type": "number"
                },
                "dz": {
                  "format": "double precision",
                  "type": "number"
                },
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom",
                "dx",
                "dy"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, dx, dy, dz=0, dm=0 - Returns a bounding box expanded from another bounding box or a geometry.",
        "tags": [
          "(rpc) st_expand"
        ]
      }
    },
    "/rpc/_st_touches": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_touches"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_touches"
        ]
      }
    },
    "/rpc/st_makebox2d": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: pointLowLeft, pointUpRight - Creates a BOX2D defined by two 2D point geometries.",
        "tags": [
          "(rpc) st_makebox2d"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: pointLowLeft, pointUpRight - Creates a BOX2D defined by two 2D point geometries.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: pointLowLeft, pointUpRight - Creates a BOX2D defined by two 2D point geometries.",
        "tags": [
          "(rpc) st_makebox2d"
        ]
      }
    },
    "/rpc/st_pointzm": {
      "get": {
        "parameters": [
          {
            "format": "double precision",
            "in": "query",
            "name": "xcoordinate",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "ycoordinate",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "zcoordinate",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "mcoordinate",
            "required": true,
            "type": "number"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "srid",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: x, y, z, m, srid=unknown - Creates a Point with X, Y, Z, M and SRID values.",
        "tags": [
          "(rpc) st_pointzm"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: x, y, z, m, srid=unknown - Creates a Point with X, Y, Z, M and SRID values.",
              "properties": {
                "mcoordinate": {
                  "format": "double precision",
                  "type": "number"
                },
                "srid": {
                  "format": "integer",
                  "type": "integer"
                },
                "xcoordinate": {
                  "format": "double precision",
                  "type": "number"
                },
                "ycoordinate": {
                  "format": "double precision",
                  "type": "number"
                },
                "zcoordinate": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "xcoordinate",
                "ycoordinate",
                "zcoordinate",
                "mcoordinate"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: x, y, z, m, srid=unknown - Creates a Point with X, Y, Z, M and SRID values.",
        "tags": [
          "(rpc) st_pointzm"
        ]
      }
    },
    "/rpc/geometry_distance_box": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_distance_box"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_distance_box"
        ]
      }
    },
    "/rpc/postgis_lib_revision": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_lib_revision"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_lib_revision"
        ]
      }
    },
    "/rpc/st_triangulatepolygon": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "g1",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom - Computes the constrained Delaunay triangulation of polygons",
        "tags": [
          "(rpc) st_triangulatepolygon"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom - Computes the constrained Delaunay triangulation of polygons",
              "properties": {
                "g1": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "g1"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom - Computes the constrained Delaunay triangulation of polygons",
        "tags": [
          "(rpc) st_triangulatepolygon"
        ]
      }
    },
    "/rpc/geometry_gt": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_gt"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_gt"
        ]
      }
    },
    "/rpc/geometry_distance_centroid": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_distance_centroid"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_distance_centroid"
        ]
      }
    },
    "/rpc/st_geometricmedian": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "g",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "tolerance",
            "required": false,
            "type": "number"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "max_iter",
            "required": false,
            "type": "integer"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "fail_if_not_converged",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, tolerance = NULL, max_iter = 10000, fail_if_not_converged = false - Returns the geometric median of a MultiPoint.",
        "tags": [
          "(rpc) st_geometricmedian"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom, tolerance = NULL, max_iter = 10000, fail_if_not_converged = false - Returns the geometric median of a MultiPoint.",
              "properties": {
                "fail_if_not_converged": {
                  "format": "boolean",
                  "type": "boolean"
                },
                "g": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "max_iter": {
                  "format": "integer",
                  "type": "integer"
                },
                "tolerance": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "g"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, tolerance = NULL, max_iter = 10000, fail_if_not_converged = false - Returns the geometric median of a MultiPoint.",
        "tags": [
          "(rpc) st_geometricmedian"
        ]
      }
    },
    "/rpc/_st_covers": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_covers"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_covers"
        ]
      }
    },
    "/rpc/setup_freelance_barber": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Creates barber record for freelance barber account type",
              "properties": {
                "p_user_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "p_user_id"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Creates barber record for freelance barber account type",
        "tags": [
          "(rpc) setup_freelance_barber"
        ]
      }
    },
    "/rpc/st_pointm": {
      "get": {
        "parameters": [
          {
            "format": "double precision",
            "in": "query",
            "name": "xcoordinate",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "ycoordinate",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "mcoordinate",
            "required": true,
            "type": "number"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "srid",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: x, y, m, srid=unknown - Creates a Point with X, Y, M and SRID values.",
        "tags": [
          "(rpc) st_pointm"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: x, y, m, srid=unknown - Creates a Point with X, Y, M and SRID values.",
              "properties": {
                "mcoordinate": {
                  "format": "double precision",
                  "type": "number"
                },
                "srid": {
                  "format": "integer",
                  "type": "integer"
                },
                "xcoordinate": {
                  "format": "double precision",
                  "type": "number"
                },
                "ycoordinate": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "xcoordinate",
                "ycoordinate",
                "mcoordinate"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: x, y, m, srid=unknown - Creates a Point with X, Y, M and SRID values.",
        "tags": [
          "(rpc) st_pointm"
        ]
      }
    },
    "/rpc/st_frechetdistance": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "",
            "required": false,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2, densifyFrac = -1 - Returns the Fréchet distance between two geometries.",
        "tags": [
          "(rpc) st_frechetdistance"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1, g2, densifyFrac = -1 - Returns the Fréchet distance between two geometries.",
              "properties": {
                "": {
                  "format": "double precision",
                  "type": "number"
                },
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2, densifyFrac = -1 - Returns the Fréchet distance between two geometries.",
        "tags": [
          "(rpc) st_frechetdistance"
        ]
      }
    },
    "/rpc/st_geometryfromtext": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geometryfromtext"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geometryfromtext"
        ]
      }
    },
    "/rpc/st_offsetcurve": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "line",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "distance",
            "required": true,
            "type": "number"
          },
          {
            "format": "text",
            "in": "query",
            "name": "params",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: line, signed_distance, style_parameters=' - Returns an offset line at a given distance and side from an input line.",
        "tags": [
          "(rpc) st_offsetcurve"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: line, signed_distance, style_parameters=' - Returns an offset line at a given distance and side from an input line.",
              "properties": {
                "distance": {
                  "format": "double precision",
                  "type": "number"
                },
                "line": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "params": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "line",
                "distance"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: line, signed_distance, style_parameters=' - Returns an offset line at a given distance and side from an input line.",
        "tags": [
          "(rpc) st_offsetcurve"
        ]
      }
    },
    "/rpc/st_geomfromewkt": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfromewkt"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfromewkt"
        ]
      }
    },
    "/rpc/postgis_proj_version": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns the version number of the PROJ4 library.",
        "tags": [
          "(rpc) postgis_proj_version"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Returns the version number of the PROJ4 library.",
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns the version number of the PROJ4 library.",
        "tags": [
          "(rpc) postgis_proj_version"
        ]
      }
    },
    "/rpc/disablelongtransactions": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Disables long transaction support.",
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Disables long transaction support.",
        "tags": [
          "(rpc) disablelongtransactions"
        ]
      }
    },
    "/rpc/st_gmltosql": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_gmltosql"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_gmltosql"
        ]
      }
    },
    "/rpc/geometry_below": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_below"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_below"
        ]
      }
    },
    "/rpc/st_minimumboundingcircle": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "inputgeom",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "segs_per_quarter",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, num_segs_per_qt_circ=48 - Returns the smallest circle polygon that contains a geometry.",
        "tags": [
          "(rpc) st_minimumboundingcircle"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geomA, num_segs_per_qt_circ=48 - Returns the smallest circle polygon that contains a geometry.",
              "properties": {
                "inputgeom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "segs_per_quarter": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "required": [
                "inputgeom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, num_segs_per_qt_circ=48 - Returns the smallest circle polygon that contains a geometry.",
        "tags": [
          "(rpc) st_minimumboundingcircle"
        ]
      }
    },
    "/rpc/postgis_extensions_upgrade": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Packages and upgrades PostGIS extensions (e.g. postgis_raster,postgis_topology, postgis_sfcgal) to latest available version.",
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Packages and upgrades PostGIS extensions (e.g. postgis_raster,postgis_topology, postgis_sfcgal) to latest available version.",
        "tags": [
          "(rpc) postgis_extensions_upgrade"
        ]
      }
    },
    "/rpc/st_multilinestringfromtext": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_multilinestringfromtext"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_multilinestringfromtext"
        ]
      }
    },
    "/rpc/_st_sortablehash": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_sortablehash"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_sortablehash"
        ]
      }
    },
    "/rpc/geometry_cmp": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_cmp"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_cmp"
        ]
      }
    },
    "/rpc/geometry_same_3d": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_same_3d"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_same_3d"
        ]
      }
    },
    "/rpc/st_isvaliddetail": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "flags",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, flags - Returns a valid_detail row stating if a geometry is valid or if not a reason and a location.",
        "tags": [
          "(rpc) st_isvaliddetail"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom, flags - Returns a valid_detail row stating if a geometry is valid or if not a reason and a location.",
              "properties": {
                "flags": {
                  "format": "integer",
                  "type": "integer"
                },
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, flags - Returns a valid_detail row stating if a geometry is valid or if not a reason and a location.",
        "tags": [
          "(rpc) st_isvaliddetail"
        ]
      }
    },
    "/rpc/st_polyfromtext": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_polyfromtext"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_polyfromtext"
        ]
      }
    },
    "/rpc/update_customer_address": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Update customer address. Note: latitude/longitude are generated columns and cannot be updated directly - they are automatically computed from the location geography column.",
              "properties": {
                "p_address_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "p_address_line1": {
                  "format": "text",
                  "type": "string"
                },
                "p_address_line2": {
                  "format": "text",
                  "type": "string"
                },
                "p_address_type": {
                  "format": "text",
                  "type": "string"
                },
                "p_building_name": {
                  "format": "text",
                  "type": "string"
                },
                "p_city": {
                  "format": "text",
                  "type": "string"
                },
                "p_contact_number": {
                  "format": "text",
                  "type": "string"
                },
                "p_delivery_instructions": {
                  "format": "text",
                  "type": "string"
                },
                "p_floor": {
                  "format": "text",
                  "type": "string"
                },
                "p_is_default": {
                  "format": "boolean",
                  "type": "boolean"
                },
                "p_label": {
                  "format": "text",
                  "type": "string"
                },
                "p_landmark": {
                  "format": "text",
                  "type": "string"
                },
                "p_latitude": {
                  "format": "numeric",
                  "type": "number"
                },
                "p_longitude": {
                  "format": "numeric",
                  "type": "number"
                },
                "p_postal_code": {
                  "format": "text",
                  "type": "string"
                },
                "p_state": {
                  "format": "text",
                  "type": "string"
                },
                "p_unit_number": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "p_address_id"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update customer address. Note: latitude/longitude are generated columns and cannot be updated directly - they are automatically computed from the location geography column.",
        "tags": [
          "(rpc) update_customer_address"
        ]
      }
    },
    "/rpc/st_squaregrid": {
      "get": {
        "parameters": [
          {
            "format": "double precision",
            "in": "query",
            "name": "size",
            "required": true,
            "type": "number"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "bounds",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: size, bounds - Returns a set of grid squares and cell indices that completely cover the bounds of the geometry argument.",
        "tags": [
          "(rpc) st_squaregrid"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: size, bounds - Returns a set of grid squares and cell indices that completely cover the bounds of the geometry argument.",
              "properties": {
                "bounds": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "size": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "size",
                "bounds"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: size, bounds - Returns a set of grid squares and cell indices that completely cover the bounds of the geometry argument.",
        "tags": [
          "(rpc) st_squaregrid"
        ]
      }
    },
    "/rpc/st_geomfromgml": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfromgml"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfromgml"
        ]
      }
    },
    "/rpc/_st_longestline": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_longestline"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_longestline"
        ]
      }
    },
    "/rpc/st_aslatlontext": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "tmpl",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_aslatlontext"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "tmpl": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_aslatlontext"
        ]
      }
    },
    "/rpc/st_distancespheroid": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.spheroid",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomlonlatA, geomlonlatB, measurement_spheroid=WGS84 - Returns the minimum distance between two lon/lat geometries using a spheroidal earth model.",
        "tags": [
          "(rpc) st_distancespheroid"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geomlonlatA, geomlonlatB, measurement_spheroid=WGS84 - Returns the minimum distance between two lon/lat geometries using a spheroidal earth model.",
              "properties": {
                "": {
                  "format": "public.spheroid",
                  "type": "string"
                },
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2",
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomlonlatA, geomlonlatB, measurement_spheroid=WGS84 - Returns the minimum distance between two lon/lat geometries using a spheroidal earth model.",
        "tags": [
          "(rpc) st_distancespheroid"
        ]
      }
    },
    "/rpc/geometry_lt": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_lt"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_lt"
        ]
      }
    },
    "/rpc/_postgis_deprecate": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "oldname",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "newname",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _postgis_deprecate"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "newname": {
                  "format": "text",
                  "type": "string"
                },
                "oldname": {
                  "format": "text",
                  "type": "string"
                },
                "version": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "oldname",
                "newname",
                "version"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _postgis_deprecate"
        ]
      }
    },
    "/rpc/cleanup_expired_route_cache": {
      "post": {
        "description": "Returns the number of deleted entries.",
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Removes expired cache entries. Should be run periodically (e.g., daily).\nReturns the number of deleted entries.",
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Removes expired cache entries. Should be run periodically (e.g., daily).",
        "tags": [
          "(rpc) cleanup_expired_route_cache"
        ]
      }
    },
    "/rpc/st_assvg": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "rel",
            "required": false,
            "type": "integer"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "maxdecimaldigits",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_assvg"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "maxdecimaldigits": {
                  "format": "integer",
                  "type": "integer"
                },
                "rel": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_assvg"
        ]
      }
    },
    "/rpc/toggle_online_status": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "account_type": {
                  "format": "text",
                  "type": "string"
                },
                "new_status": {
                  "format": "boolean",
                  "type": "boolean"
                },
                "p_user_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "p_user_id",
                "new_status"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) toggle_online_status"
        ]
      }
    },
    "/rpc/dropgeometrycolumn": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: catalog_name, schema_name, table_name, column_name - Removes a geometry column from a spatial table.",
              "properties": {
                "catalog_name": {
                  "format": "character varying",
                  "type": "string"
                },
                "column_name": {
                  "format": "character varying",
                  "type": "string"
                },
                "schema_name": {
                  "format": "character varying",
                  "type": "string"
                },
                "table_name": {
                  "format": "character varying",
                  "type": "string"
                }
              },
              "required": [
                "catalog_name",
                "schema_name",
                "table_name",
                "column_name"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: catalog_name, schema_name, table_name, column_name - Removes a geometry column from a spatial table.",
        "tags": [
          "(rpc) dropgeometrycolumn"
        ]
      }
    },
    "/rpc/st_dwithin": {
      "get": {
        "parameters": [
          {
            "format": "public.geography",
            "in": "query",
            "name": "geog1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geography",
            "in": "query",
            "name": "geog2",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "tolerance",
            "required": true,
            "type": "number"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "use_spheroid",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_dwithin"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geog1": {
                  "format": "public.geography",
                  "type": "string"
                },
                "geog2": {
                  "format": "public.geography",
                  "type": "string"
                },
                "tolerance": {
                  "format": "double precision",
                  "type": "number"
                },
                "use_spheroid": {
                  "format": "boolean",
                  "type": "boolean"
                }
              },
              "required": [
                "geog1",
                "geog2",
                "tolerance"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_dwithin"
        ]
      }
    },
    "/rpc/st_3dclosestpoint": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2 - Returns the 3D point on g1 that is closest to g2. This is the first point of the 3D shortest line.",
        "tags": [
          "(rpc) st_3dclosestpoint"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1, g2 - Returns the 3D point on g1 that is closest to g2. This is the first point of the 3D shortest line.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2 - Returns the 3D point on g1 that is closest to g2. This is the first point of the 3D shortest line.",
        "tags": [
          "(rpc) st_3dclosestpoint"
        ]
      }
    },
    "/rpc/st_asmvtgeom": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.box2d",
            "in": "query",
            "name": "bounds",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "extent",
            "required": false,
            "type": "integer"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "buffer",
            "required": false,
            "type": "integer"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "clip_geom",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_asmvtgeom"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "bounds": {
                  "format": "public.box2d",
                  "type": "string"
                },
                "buffer": {
                  "format": "integer",
                  "type": "integer"
                },
                "clip_geom": {
                  "format": "boolean",
                  "type": "boolean"
                },
                "extent": {
                  "format": "integer",
                  "type": "integer"
                },
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom",
                "bounds"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_asmvtgeom"
        ]
      }
    },
    "/rpc/st_orderingequals": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_orderingequals"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_orderingequals"
        ]
      }
    },
    "/rpc/st_snaptogrid": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "",
            "required": true,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, pointOrigin, sizeX, sizeY, sizeZ, sizeM - Snap all points of the input geometry to a regular grid.",
        "tags": [
          "(rpc) st_snaptogrid"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geomA, pointOrigin, sizeX, sizeY, sizeZ, sizeM - Snap all points of the input geometry to a regular grid.",
              "properties": {
                "": {
                  "format": "double precision",
                  "type": "number"
                },
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2",
                "",
                "",
                "",
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, pointOrigin, sizeX, sizeY, sizeZ, sizeM - Snap all points of the input geometry to a regular grid.",
        "tags": [
          "(rpc) st_snaptogrid"
        ]
      }
    },
    "/rpc/get_customer_addresses": {
      "get": {
        "parameters": [
          {
            "format": "uuid",
            "in": "query",
            "name": "p_user_id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Retrieves all addresses for a customer",
        "tags": [
          "(rpc) get_customer_addresses"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Retrieves all addresses for a customer",
              "properties": {
                "p_user_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "p_user_id"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Retrieves all addresses for a customer",
        "tags": [
          "(rpc) get_customer_addresses"
        ]
      }
    },
    "/rpc/cleanup_old_otp_requests": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) cleanup_old_otp_requests"
        ]
      }
    },
    "/rpc/st_polygonfromwkb": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_polygonfromwkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_polygonfromwkb"
        ]
      }
    },
    "/rpc/postgis_lib_version": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns the version number of the PostGIS library.",
        "tags": [
          "(rpc) postgis_lib_version"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Returns the version number of the PostGIS library.",
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns the version number of the PostGIS library.",
        "tags": [
          "(rpc) postgis_lib_version"
        ]
      }
    },
    "/rpc/st_disjoint": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_disjoint"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_disjoint"
        ]
      }
    },
    "/rpc/st_union": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "gridsize",
            "required": true,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2, gridSize - Computes a geometry representing the point-set union of the input geometries.",
        "tags": [
          "(rpc) st_union"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1, g2, gridSize - Computes a geometry representing the point-set union of the input geometries.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "gridsize": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geom1",
                "geom2",
                "gridsize"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2, gridSize - Computes a geometry representing the point-set union of the input geometries.",
        "tags": [
          "(rpc) st_union"
        ]
      }
    },
    "/rpc/st_coveredby": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_coveredby"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_coveredby"
        ]
      }
    },
    "/rpc/st_containsproperly": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_containsproperly"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_containsproperly"
        ]
      }
    },
    "/rpc/_st_overlaps": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_overlaps"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_overlaps"
        ]
      }
    },
    "/rpc/_st_maxdistance": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_maxdistance"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_maxdistance"
        ]
      }
    },
    "/rpc/postgis_scripts_released": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns the version number of the postgis.sql script released with the installed PostGIS lib.",
        "tags": [
          "(rpc) postgis_scripts_released"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Returns the version number of the postgis.sql script released with the installed PostGIS lib.",
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns the version number of the postgis.sql script released with the installed PostGIS lib.",
        "tags": [
          "(rpc) postgis_scripts_released"
        ]
      }
    },
    "/rpc/st_asencodedpolyline": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "nprecision",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_asencodedpolyline"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "nprecision": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_asencodedpolyline"
        ]
      }
    },
    "/rpc/st_astext": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_astext"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_astext"
        ]
      }
    },
    "/rpc/st_intersection": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "gridsize",
            "required": false,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, geomB, gridSize = -1 - Computes a geometry representing the shared portion of geometries A and B.",
        "tags": [
          "(rpc) st_intersection"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geomA, geomB, gridSize = -1 - Computes a geometry representing the shared portion of geometries A and B.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "gridsize": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, geomB, gridSize = -1 - Computes a geometry representing the shared portion of geometries A and B.",
        "tags": [
          "(rpc) st_intersection"
        ]
      }
    },
    "/rpc/st_square": {
      "get": {
        "parameters": [
          {
            "format": "double precision",
            "in": "query",
            "name": "size",
            "required": true,
            "type": "number"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "cell_i",
            "required": true,
            "type": "integer"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "cell_j",
            "required": true,
            "type": "integer"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "origin",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: size, cell_i, cell_j, origin - Returns a single square, using the provided edge size and cell coordinate within the square grid space.",
        "tags": [
          "(rpc) st_square"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: size, cell_i, cell_j, origin - Returns a single square, using the provided edge size and cell coordinate within the square grid space.",
              "properties": {
                "cell_i": {
                  "format": "integer",
                  "type": "integer"
                },
                "cell_j": {
                  "format": "integer",
                  "type": "integer"
                },
                "origin": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "size": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "size",
                "cell_i",
                "cell_j"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: size, cell_i, cell_j, origin - Returns a single square, using the provided edge size and cell coordinate within the square grid space.",
        "tags": [
          "(rpc) st_square"
        ]
      }
    },
    "/rpc/st_contains": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_contains"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_contains"
        ]
      }
    },
    "/rpc/st_multilinefromwkb": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_multilinefromwkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_multilinefromwkb"
        ]
      }
    },
    "/rpc/st_difference": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "gridsize",
            "required": false,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, geomB, gridSize = -1 - Computes a geometry representing the part of geometry A that does not intersect geometry B.",
        "tags": [
          "(rpc) st_difference"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geomA, geomB, gridSize = -1 - Computes a geometry representing the part of geometry A that does not intersect geometry B.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "gridsize": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, geomB, gridSize = -1 - Computes a geometry representing the part of geometry A that does not intersect geometry B.",
        "tags": [
          "(rpc) st_difference"
        ]
      }
    },
    "/rpc/st_curvetoline": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "tol",
            "required": false,
            "type": "number"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "toltype",
            "required": false,
            "type": "integer"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "flags",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: curveGeom, tolerance, tolerance_type, flags - Converts a geometry containing curves to a linear geometry.",
        "tags": [
          "(rpc) st_curvetoline"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: curveGeom, tolerance, tolerance_type, flags - Converts a geometry containing curves to a linear geometry.",
              "properties": {
                "flags": {
                  "format": "integer",
                  "type": "integer"
                },
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "tol": {
                  "format": "double precision",
                  "type": "number"
                },
                "toltype": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: curveGeom, tolerance, tolerance_type, flags - Converts a geometry containing curves to a linear geometry.",
        "tags": [
          "(rpc) st_curvetoline"
        ]
      }
    },
    "/rpc/st_minimumboundingradius": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom - Returns the center point and radius of the smallest circle that contains a geometry.",
        "tags": [
          "(rpc) st_minimumboundingradius"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom - Returns the center point and radius of the smallest circle that contains a geometry.",
              "properties": {
                "": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom - Returns the center point and radius of the smallest circle that contains a geometry.",
        "tags": [
          "(rpc) st_minimumboundingradius"
        ]
      }
    },
    "/rpc/st_geomfromwkb": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfromwkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfromwkb"
        ]
      }
    },
    "/rpc/setup_barbershop_owner": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Updates role to barbershop_owner and creates barbershop record",
              "properties": {
                "p_shop_name": {
                  "format": "text",
                  "type": "string"
                },
                "p_user_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "p_user_id"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Updates role to barbershop_owner and creates barbershop record",
        "tags": [
          "(rpc) setup_barbershop_owner"
        ]
      }
    },
    "/rpc/postgis_full_version": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Reports full PostGIS version and build configuration infos.",
        "tags": [
          "(rpc) postgis_full_version"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Reports full PostGIS version and build configuration infos.",
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Reports full PostGIS version and build configuration infos.",
        "tags": [
          "(rpc) postgis_full_version"
        ]
      }
    },
    "/rpc/get_or_create_customer_credits": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "p_user_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "p_user_id"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) get_or_create_customer_credits"
        ]
      }
    },
    "/rpc/get_review_stats": {
      "get": {
        "parameters": [
          {
            "format": "uuid",
            "in": "query",
            "name": "p_barber_id",
            "required": false,
            "type": "string"
          },
          {
            "format": "uuid",
            "in": "query",
            "name": "p_barbershop_id",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Gets rating statistics and distribution",
        "tags": [
          "(rpc) get_review_stats"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Gets rating statistics and distribution",
              "properties": {
                "p_barber_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "p_barbershop_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Gets rating statistics and distribution",
        "tags": [
          "(rpc) get_review_stats"
        ]
      }
    },
    "/rpc/geomfromewkb": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geomfromewkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geomfromewkb"
        ]
      }
    },
    "/rpc/st_linestringfromwkb": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_linestringfromwkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_linestringfromwkb"
        ]
      }
    },
    "/rpc/respond_to_review": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Allows barber to respond to a review",
              "properties": {
                "p_barber_user_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "p_response": {
                  "format": "text",
                  "type": "string"
                },
                "p_review_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "p_review_id",
                "p_barber_user_id",
                "p_response"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Allows barber to respond to a review",
        "tags": [
          "(rpc) respond_to_review"
        ]
      }
    },
    "/rpc/st_mpointfromwkb": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_mpointfromwkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_mpointfromwkb"
        ]
      }
    },
    "/rpc/get_cached_route": {
      "post": {
        "description": "Automatically updates last_used_at and hit_count when cache is hit.",
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Retrieves cached route if available. Returns NULL if not cached.\nAutomatically updates last_used_at and hit_count when cache is hit.",
              "properties": {
                "p_destination_lat": {
                  "format": "double precision",
                  "type": "number"
                },
                "p_destination_lng": {
                  "format": "double precision",
                  "type": "number"
                },
                "p_origin_lat": {
                  "format": "double precision",
                  "type": "number"
                },
                "p_origin_lng": {
                  "format": "double precision",
                  "type": "number"
                },
                "p_profile": {
                  "format": "character varying",
                  "type": "string"
                }
              },
              "required": [
                "p_origin_lat",
                "p_origin_lng",
                "p_destination_lat",
                "p_destination_lng"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Retrieves cached route if available. Returns NULL if not cached.",
        "tags": [
          "(rpc) get_cached_route"
        ]
      }
    },
    "/rpc/st_covers": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_covers"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_covers"
        ]
      }
    },
    "/rpc/_st_dfullywithin": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "",
            "required": true,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_dfullywithin"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "double precision",
                  "type": "number"
                },
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2",
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_dfullywithin"
        ]
      }
    },
    "/rpc/st_addpoint": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: linestring, point, position = -1 - Add a point to a LineString.",
        "tags": [
          "(rpc) st_addpoint"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: linestring, point, position = -1 - Add a point to a LineString.",
              "properties": {
                "": {
                  "format": "integer",
                  "type": "integer"
                },
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2",
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: linestring, point, position = -1 - Add a point to a LineString.",
        "tags": [
          "(rpc) st_addpoint"
        ]
      }
    },
    "/rpc/postgis_scripts_installed": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns version of the PostGIS scripts installed in this database.",
        "tags": [
          "(rpc) postgis_scripts_installed"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Returns version of the PostGIS scripts installed in this database.",
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns version of the PostGIS scripts installed in this database.",
        "tags": [
          "(rpc) postgis_scripts_installed"
        ]
      }
    },
    "/rpc/st_concavehull": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "param_geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "param_pctconvex",
            "required": true,
            "type": "number"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "param_allow_holes",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: param_geom, param_pctconvex, param_allow_holes = false - Computes a possibly concave geometry that encloses all input geometry vertices",
        "tags": [
          "(rpc) st_concavehull"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: param_geom, param_pctconvex, param_allow_holes = false - Computes a possibly concave geometry that encloses all input geometry vertices",
              "properties": {
                "param_allow_holes": {
                  "format": "boolean",
                  "type": "boolean"
                },
                "param_geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "param_pctconvex": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "param_geom",
                "param_pctconvex"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: param_geom, param_pctconvex, param_allow_holes = false - Computes a possibly concave geometry that encloses all input geometry vertices",
        "tags": [
          "(rpc) st_concavehull"
        ]
      }
    },
    "/rpc/_st_equals": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_equals"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_equals"
        ]
      }
    },
    "/rpc/geometry_eq": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_eq"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_eq"
        ]
      }
    },
    "/rpc/postgis_liblwgeom_version": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns the version number of the liblwgeom library. This should match the version of PostGIS.",
        "tags": [
          "(rpc) postgis_liblwgeom_version"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Returns the version number of the liblwgeom library. This should match the version of PostGIS.",
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns the version number of the liblwgeom library. This should match the version of PostGIS.",
        "tags": [
          "(rpc) postgis_liblwgeom_version"
        ]
      }
    },
    "/rpc/st_makeline": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom1, geom2 - Creates a LineString from Point, MultiPoint, or LineString geometries.",
        "tags": [
          "(rpc) st_makeline"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom1, geom2 - Creates a LineString from Point, MultiPoint, or LineString geometries.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom1, geom2 - Creates a LineString from Point, MultiPoint, or LineString geometries.",
        "tags": [
          "(rpc) st_makeline"
        ]
      }
    },
    "/rpc/st_linecrossingdirection": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "line1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "line2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_linecrossingdirection"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "line1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "line2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "line1",
                "line2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_linecrossingdirection"
        ]
      }
    },
    "/rpc/round_coordinate": {
      "get": {
        "parameters": [
          {
            "format": "double precision",
            "in": "query",
            "name": "coord",
            "required": true,
            "type": "number"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "decimals",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) round_coordinate"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "coord": {
                  "format": "double precision",
                  "type": "number"
                },
                "decimals": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "required": [
                "coord"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) round_coordinate"
        ]
      }
    },
    "/rpc/geometry_overleft": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_overleft"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_overleft"
        ]
      }
    },
    "/rpc/st_maxdistance": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2 - Returns the 2D largest distance between two geometries in projected units.",
        "tags": [
          "(rpc) st_maxdistance"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1, g2 - Returns the 2D largest distance between two geometries in projected units.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2 - Returns the 2D largest distance between two geometries in projected units.",
        "tags": [
          "(rpc) st_maxdistance"
        ]
      }
    },
    "/rpc/st_angle": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "pt1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "pt2",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "pt3",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "pt4",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: point1, point2, point3, point4 - Returns the angle between two vectors defined by 3 or 4 points, or 2 lines.",
        "tags": [
          "(rpc) st_angle"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: point1, point2, point3, point4 - Returns the angle between two vectors defined by 3 or 4 points, or 2 lines.",
              "properties": {
                "pt1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "pt2": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "pt3": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "pt4": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "pt1",
                "pt2",
                "pt3"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: point1, point2, point3, point4 - Returns the angle between two vectors defined by 3 or 4 points, or 2 lines.",
        "tags": [
          "(rpc) st_angle"
        ]
      }
    },
    "/rpc/postgis_transform_geometry": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_transform_geometry"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "integer",
                  "type": "integer"
                },
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom",
                "",
                "",
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_transform_geometry"
        ]
      }
    },
    "/rpc/postgis_type_name": {
      "get": {
        "parameters": [
          {
            "format": "character varying",
            "in": "query",
            "name": "geomname",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "coord_dimension",
            "required": true,
            "type": "integer"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "use_new_name",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_type_name"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "coord_dimension": {
                  "format": "integer",
                  "type": "integer"
                },
                "geomname": {
                  "format": "character varying",
                  "type": "string"
                },
                "use_new_name": {
                  "format": "boolean",
                  "type": "boolean"
                }
              },
              "required": [
                "geomname",
                "coord_dimension"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_type_name"
        ]
      }
    },
    "/rpc/_st_3ddwithin": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "",
            "required": true,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_3ddwithin"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "double precision",
                  "type": "number"
                },
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2",
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_3ddwithin"
        ]
      }
    },
    "/rpc/st_asewkt": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_asewkt"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_asewkt"
        ]
      }
    },
    "/rpc/st_geomcollfromtext": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomcollfromtext"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomcollfromtext"
        ]
      }
    },
    "/rpc/st_3dmakebox": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: point3DLowLeftBottom, point3DUpRightTop - Creates a BOX3D defined by two 3D point geometries.",
        "tags": [
          "(rpc) st_3dmakebox"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: point3DLowLeftBottom, point3DUpRightTop - Creates a BOX3D defined by two 3D point geometries.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: point3DLowLeftBottom, point3DUpRightTop - Creates a BOX3D defined by two 3D point geometries.",
        "tags": [
          "(rpc) st_3dmakebox"
        ]
      }
    },
    "/rpc/st_symmetricdifference": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_symmetricdifference"
        ]
      }
    },
    "/rpc/geometry_same": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_same"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_same"
        ]
      }
    },
    "/rpc/st_simplifypolygonhull": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "vertex_fraction",
            "required": true,
            "type": "number"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "is_outer",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: param_geom, vertex_fraction, is_outer = true - Computes a simplifed topology-preserving outer or inner hull of a polygonal geometry.",
        "tags": [
          "(rpc) st_simplifypolygonhull"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: param_geom, vertex_fraction, is_outer = true - Computes a simplifed topology-preserving outer or inner hull of a polygonal geometry.",
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "is_outer": {
                  "format": "boolean",
                  "type": "boolean"
                },
                "vertex_fraction": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geom",
                "vertex_fraction"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: param_geom, vertex_fraction, is_outer = true - Computes a simplifed topology-preserving outer or inner hull of a polygonal geometry.",
        "tags": [
          "(rpc) st_simplifypolygonhull"
        ]
      }
    },
    "/rpc/st_removerepeatedpoints": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "tolerance",
            "required": false,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, tolerance - Returns a version of a geometry with duplicate points removed.",
        "tags": [
          "(rpc) st_removerepeatedpoints"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom, tolerance - Returns a version of a geometry with duplicate points removed.",
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "tolerance": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, tolerance - Returns a version of a geometry with duplicate points removed.",
        "tags": [
          "(rpc) st_removerepeatedpoints"
        ]
      }
    },
    "/rpc/st_mlinefromtext": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_mlinefromtext"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_mlinefromtext"
        ]
      }
    },
    "/rpc/st_3dlongestline": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2 - Returns the 3D longest line between two geometries",
        "tags": [
          "(rpc) st_3dlongestline"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1, g2 - Returns the 3D longest line between two geometries",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2 - Returns the 3D longest line between two geometries",
        "tags": [
          "(rpc) st_3dlongestline"
        ]
      }
    },
    "/rpc/geometry_gist_same_2d": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "internal",
                  "type": "string"
                },
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2",
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_gist_same_2d"
        ]
      }
    },
    "/rpc/st_force3dz": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "zvalue",
            "required": false,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, Zvalue = 0.0 - Force the geometries into XYZ mode.",
        "tags": [
          "(rpc) st_force3dz"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geomA, Zvalue = 0.0 - Force the geometries into XYZ mode.",
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "zvalue": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, Zvalue = 0.0 - Force the geometries into XYZ mode.",
        "tags": [
          "(rpc) st_force3dz"
        ]
      }
    },
    "/rpc/geometry_left": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_left"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_left"
        ]
      }
    },
    "/rpc/update_customer_address_direct": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "p_address_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "p_address_line1": {
                  "format": "text",
                  "type": "string"
                },
                "p_address_line2": {
                  "format": "text",
                  "type": "string"
                },
                "p_city": {
                  "format": "text",
                  "type": "string"
                },
                "p_customer_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "p_is_default": {
                  "format": "boolean",
                  "type": "boolean"
                },
                "p_label": {
                  "format": "text",
                  "type": "string"
                },
                "p_latitude": {
                  "format": "numeric",
                  "type": "number"
                },
                "p_longitude": {
                  "format": "numeric",
                  "type": "number"
                },
                "p_postal_code": {
                  "format": "text",
                  "type": "string"
                },
                "p_state": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "p_address_id",
                "p_customer_id",
                "p_label",
                "p_address_line1",
                "p_address_line2",
                "p_city",
                "p_state",
                "p_postal_code",
                "p_latitude",
                "p_longitude",
                "p_is_default"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) update_customer_address_direct"
        ]
      }
    },
    "/rpc/st_length": {
      "get": {
        "parameters": [
          {
            "format": "public.geography",
            "in": "query",
            "name": "geog",
            "required": true,
            "type": "string"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "use_spheroid",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geog, use_spheroid=true - Returns the 2D length of a linear geometry.",
        "tags": [
          "(rpc) st_length"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geog, use_spheroid=true - Returns the 2D length of a linear geometry.",
              "properties": {
                "geog": {
                  "format": "public.geography",
                  "type": "string"
                },
                "use_spheroid": {
                  "format": "boolean",
                  "type": "boolean"
                }
              },
              "required": [
                "geog"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geog, use_spheroid=true - Returns the 2D length of a linear geometry.",
        "tags": [
          "(rpc) st_length"
        ]
      }
    },
    "/rpc/postgis_libxml_version": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns the version number of the libxml2 library.",
        "tags": [
          "(rpc) postgis_libxml_version"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Returns the version number of the libxml2 library.",
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns the version number of the libxml2 library.",
        "tags": [
          "(rpc) postgis_libxml_version"
        ]
      }
    },
    "/rpc/st_touches": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_touches"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_touches"
        ]
      }
    },
    "/rpc/st_linefromwkb": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_linefromwkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_linefromwkb"
        ]
      }
    },
    "/rpc/_st_orderingequals": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_orderingequals"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_orderingequals"
        ]
      }
    },
    "/rpc/st_mlinefromwkb": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_mlinefromwkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_mlinefromwkb"
        ]
      }
    },
    "/rpc/_st_voronoi": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "g1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "clip",
            "required": false,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "tolerance",
            "required": false,
            "type": "number"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "return_polygons",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_voronoi"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "clip": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "g1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "return_polygons": {
                  "format": "boolean",
                  "type": "boolean"
                },
                "tolerance": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "g1"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_voronoi"
        ]
      }
    },
    "/rpc/redeem_voucher": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Redeem a voucher using points, returns user_voucher_id",
              "properties": {
                "p_user_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "p_voucher_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "p_user_id",
                "p_voucher_id"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Redeem a voucher using points, returns user_voucher_id",
        "tags": [
          "(rpc) redeem_voucher"
        ]
      }
    },
    "/rpc/st_overlaps": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_overlaps"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_overlaps"
        ]
      }
    },
    "/rpc/updategeometrysrid": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: catalog_name, schema_name, table_name, column_name, srid - Updates the SRID of all features in a geometry column, and the table metadata.",
              "properties": {
                "catalogn_name": {
                  "format": "character varying",
                  "type": "string"
                },
                "column_name": {
                  "format": "character varying",
                  "type": "string"
                },
                "new_srid_in": {
                  "format": "integer",
                  "type": "integer"
                },
                "schema_name": {
                  "format": "character varying",
                  "type": "string"
                },
                "table_name": {
                  "format": "character varying",
                  "type": "string"
                }
              },
              "required": [
                "catalogn_name",
                "schema_name",
                "table_name",
                "column_name",
                "new_srid_in"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: catalog_name, schema_name, table_name, column_name, srid - Updates the SRID of all features in a geometry column, and the table metadata.",
        "tags": [
          "(rpc) updategeometrysrid"
        ]
      }
    },
    "/rpc/_st_intersects": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_intersects"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_intersects"
        ]
      }
    },
    "/rpc/_st_containsproperly": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_containsproperly"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_containsproperly"
        ]
      }
    },
    "/rpc/st_perimeter": {
      "get": {
        "parameters": [
          {
            "format": "public.geography",
            "in": "query",
            "name": "geog",
            "required": true,
            "type": "string"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "use_spheroid",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geog, use_spheroid=true - Returns the length of the boundary of a polygonal geometry or geography.",
        "tags": [
          "(rpc) st_perimeter"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geog, use_spheroid=true - Returns the length of the boundary of a polygonal geometry or geography.",
              "properties": {
                "geog": {
                  "format": "public.geography",
                  "type": "string"
                },
                "use_spheroid": {
                  "format": "boolean",
                  "type": "boolean"
                }
              },
              "required": [
                "geog"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geog, use_spheroid=true - Returns the length of the boundary of a polygonal geometry or geography.",
        "tags": [
          "(rpc) st_perimeter"
        ]
      }
    },
    "/rpc/equals": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) equals"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) equals"
        ]
      }
    },
    "/rpc/add_customer_credit": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Add credits to customer account with transaction logging",
              "properties": {
                "p_amount": {
                  "format": "numeric",
                  "type": "number"
                },
                "p_booking_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "p_description": {
                  "format": "text",
                  "type": "string"
                },
                "p_metadata": {
                  "format": "jsonb"
                },
                "p_source": {
                  "format": "text",
                  "type": "string"
                },
                "p_user_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "p_user_id",
                "p_amount",
                "p_source",
                "p_description"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Add credits to customer account with transaction logging",
        "tags": [
          "(rpc) add_customer_credit"
        ]
      }
    },
    "/rpc/_st_linecrossingdirection": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "line1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "line2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_linecrossingdirection"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "line1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "line2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "line1",
                "line2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_linecrossingdirection"
        ]
      }
    },
    "/rpc/st_asgeojson": {
      "get": {
        "parameters": [
          {
            "format": "record",
            "in": "query",
            "name": "r",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "geom_column",
            "required": false,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "maxdecimaldigits",
            "required": false,
            "type": "integer"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "pretty_bool",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_asgeojson"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom_column": {
                  "format": "text",
                  "type": "string"
                },
                "maxdecimaldigits": {
                  "format": "integer",
                  "type": "integer"
                },
                "pretty_bool": {
                  "format": "boolean",
                  "type": "boolean"
                },
                "r": {
                  "format": "record",
                  "type": "string"
                }
              },
              "required": [
                "r"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_asgeojson"
        ]
      }
    },
    "/rpc/st_hausdorffdistance": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "",
            "required": true,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2, densifyFrac - Returns the Hausdorff distance between two geometries.",
        "tags": [
          "(rpc) st_hausdorffdistance"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1, g2, densifyFrac - Returns the Hausdorff distance between two geometries.",
              "properties": {
                "": {
                  "format": "double precision",
                  "type": "number"
                },
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2",
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2, densifyFrac - Returns the Hausdorff distance between two geometries.",
        "tags": [
          "(rpc) st_hausdorffdistance"
        ]
      }
    },
    "/rpc/st_normalize": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom - Return the geometry in its canonical form.",
        "tags": [
          "(rpc) st_normalize"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom - Return the geometry in its canonical form.",
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom - Return the geometry in its canonical form.",
        "tags": [
          "(rpc) st_normalize"
        ]
      }
    },
    "/rpc/postgis_version": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns PostGIS version number and compile-time options.",
        "tags": [
          "(rpc) postgis_version"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Returns PostGIS version number and compile-time options.",
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns PostGIS version number and compile-time options.",
        "tags": [
          "(rpc) postgis_version"
        ]
      }
    },
    "/rpc/deduct_customer_credit": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Deduct credits from customer account with validation",
              "properties": {
                "p_amount": {
                  "format": "numeric",
                  "type": "number"
                },
                "p_booking_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "p_description": {
                  "format": "text",
                  "type": "string"
                },
                "p_metadata": {
                  "format": "jsonb"
                },
                "p_source": {
                  "format": "text",
                  "type": "string"
                },
                "p_user_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "p_user_id",
                "p_amount",
                "p_source",
                "p_description"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Deduct credits from customer account with validation",
        "tags": [
          "(rpc) deduct_customer_credit"
        ]
      }
    },
    "/rpc/st_wkttosql": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_wkttosql"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_wkttosql"
        ]
      }
    },
    "/rpc/st_locatebetween": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geometry",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "frommeasure",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "tomeasure",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "leftrightoffset",
            "required": false,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, measure_start, measure_end, offset = 0 - Returns the portions of a geometry that match a measure range.",
        "tags": [
          "(rpc) st_locatebetween"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom, measure_start, measure_end, offset = 0 - Returns the portions of a geometry that match a measure range.",
              "properties": {
                "frommeasure": {
                  "format": "double precision",
                  "type": "number"
                },
                "geometry": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "leftrightoffset": {
                  "format": "double precision",
                  "type": "number"
                },
                "tomeasure": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geometry",
                "frommeasure",
                "tomeasure"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, measure_start, measure_end, offset = 0 - Returns the portions of a geometry that match a measure range.",
        "tags": [
          "(rpc) st_locatebetween"
        ]
      }
    },
    "/rpc/st_crosses": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_crosses"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_crosses"
        ]
      }
    },
    "/rpc/geometry_overabove": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_overabove"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_overabove"
        ]
      }
    },
    "/rpc/st_geomfromewkb": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfromewkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfromewkb"
        ]
      }
    },
    "/rpc/st_geomfromkml": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfromkml"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfromkml"
        ]
      }
    },
    "/rpc/st_hexagongrid": {
      "get": {
        "parameters": [
          {
            "format": "double precision",
            "in": "query",
            "name": "size",
            "required": true,
            "type": "number"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "bounds",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: size, bounds - Returns a set of hexagons and cell indices that completely cover the bounds of the geometry argument.",
        "tags": [
          "(rpc) st_hexagongrid"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: size, bounds - Returns a set of hexagons and cell indices that completely cover the bounds of the geometry argument.",
              "properties": {
                "bounds": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "size": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "size",
                "bounds"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: size, bounds - Returns a set of hexagons and cell indices that completely cover the bounds of the geometry argument.",
        "tags": [
          "(rpc) st_hexagongrid"
        ]
      }
    },
    "/rpc/geometry_ge": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_ge"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_ge"
        ]
      }
    },
    "/rpc/postgis_scripts_build_date": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns build date of the PostGIS scripts.",
        "tags": [
          "(rpc) postgis_scripts_build_date"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Returns build date of the PostGIS scripts.",
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns build date of the PostGIS scripts.",
        "tags": [
          "(rpc) postgis_scripts_build_date"
        ]
      }
    },
    "/rpc/st_area": {
      "get": {
        "parameters": [
          {
            "format": "public.geography",
            "in": "query",
            "name": "geog",
            "required": true,
            "type": "string"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "use_spheroid",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geog, use_spheroid=true - Returns the area of a polygonal geometry.",
        "tags": [
          "(rpc) st_area"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geog, use_spheroid=true - Returns the area of a polygonal geometry.",
              "properties": {
                "geog": {
                  "format": "public.geography",
                  "type": "string"
                },
                "use_spheroid": {
                  "format": "boolean",
                  "type": "boolean"
                }
              },
              "required": [
                "geog"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geog, use_spheroid=true - Returns the area of a polygonal geometry.",
        "tags": [
          "(rpc) st_area"
        ]
      }
    },
    "/rpc/geometry_contains": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_contains"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_contains"
        ]
      }
    },
    "/rpc/st_geomfromgeojson": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfromgeojson"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfromgeojson"
        ]
      }
    },
    "/rpc/st_pointz": {
      "get": {
        "parameters": [
          {
            "format": "double precision",
            "in": "query",
            "name": "xcoordinate",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "ycoordinate",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "zcoordinate",
            "required": true,
            "type": "number"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "srid",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: x, y, z, srid=unknown - Creates a Point with X, Y, Z and SRID values.",
        "tags": [
          "(rpc) st_pointz"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: x, y, z, srid=unknown - Creates a Point with X, Y, Z and SRID values.",
              "properties": {
                "srid": {
                  "format": "integer",
                  "type": "integer"
                },
                "xcoordinate": {
                  "format": "double precision",
                  "type": "number"
                },
                "ycoordinate": {
                  "format": "double precision",
                  "type": "number"
                },
                "zcoordinate": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "xcoordinate",
                "ycoordinate",
                "zcoordinate"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: x, y, z, srid=unknown - Creates a Point with X, Y, Z and SRID values.",
        "tags": [
          "(rpc) st_pointz"
        ]
      }
    },
    "/rpc/geometry_overright": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_overright"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_overright"
        ]
      }
    },
    "/rpc/st_pointfromwkb": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_pointfromwkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_pointfromwkb"
        ]
      }
    },
    "/rpc/st_locatealong": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geometry",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "measure",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "leftrightoffset",
            "required": false,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom_with_measure, measure, offset = 0 - Returns the point(s) on a geometry that match a measure value.",
        "tags": [
          "(rpc) st_locatealong"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom_with_measure, measure, offset = 0 - Returns the point(s) on a geometry that match a measure value.",
              "properties": {
                "geometry": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "leftrightoffset": {
                  "format": "double precision",
                  "type": "number"
                },
                "measure": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geometry",
                "measure"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom_with_measure, measure, offset = 0 - Returns the point(s) on a geometry that match a measure value.",
        "tags": [
          "(rpc) st_locatealong"
        ]
      }
    },
    "/rpc/st_dfullywithin": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "",
            "required": true,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_dfullywithin"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "double precision",
                  "type": "number"
                },
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2",
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_dfullywithin"
        ]
      }
    },
    "/rpc/st_polyfromwkb": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_polyfromwkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_polyfromwkb"
        ]
      }
    },
    "/rpc/st_mpolyfromwkb": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_mpolyfromwkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_mpolyfromwkb"
        ]
      }
    },
    "/rpc/cancel_booking": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Cancels a booking with refund eligibility check",
              "properties": {
                "p_booking_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "p_cancellation_reason": {
                  "format": "text",
                  "type": "string"
                },
                "p_customer_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "p_booking_id",
                "p_customer_id",
                "p_cancellation_reason"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Cancels a booking with refund eligibility check",
        "tags": [
          "(rpc) cancel_booking"
        ]
      }
    },
    "/rpc/st_segmentize": {
      "get": {
        "parameters": [
          {
            "format": "public.geography",
            "in": "query",
            "name": "geog",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "max_segment_length",
            "required": true,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geog, max_segment_length - Return a modified geometry/geography having no segment longer than the given distance.",
        "tags": [
          "(rpc) st_segmentize"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geog, max_segment_length - Return a modified geometry/geography having no segment longer than the given distance.",
              "properties": {
                "geog": {
                  "format": "public.geography",
                  "type": "string"
                },
                "max_segment_length": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geog",
                "max_segment_length"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geog, max_segment_length - Return a modified geometry/geography having no segment longer than the given distance.",
        "tags": [
          "(rpc) st_segmentize"
        ]
      }
    },
    "/rpc/check_radius_cooldown": {
      "post": {
        "description": "Uses server-side time (NOW()) to prevent client-side clock manipulation.",
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Checks if a barber can change their service radius based on 24-hour cooldown. \nUses server-side time (NOW()) to prevent client-side clock manipulation.",
              "properties": {
                "barber_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "barber_id"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Checks if a barber can change their service radius based on 24-hour cooldown. ",
        "tags": [
          "(rpc) check_radius_cooldown"
        ]
      }
    },
    "/rpc/st_askml": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "maxdecimaldigits",
            "required": false,
            "type": "integer"
          },
          {
            "format": "text",
            "in": "query",
            "name": "nprefix",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_askml"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "maxdecimaldigits": {
                  "format": "integer",
                  "type": "integer"
                },
                "nprefix": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_askml"
        ]
      }
    },
    "/rpc/geometry": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry"
        ]
      }
    },
    "/rpc/st_equals": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_equals"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_equals"
        ]
      }
    },
    "/rpc/addgeometrycolumn": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: catalog_name, schema_name, table_name, column_name, srid, type, dimension, use_typmod=true - Adds a geometry column to an existing table.",
              "properties": {
                "catalog_name": {
                  "format": "character varying",
                  "type": "string"
                },
                "column_name": {
                  "format": "character varying",
                  "type": "string"
                },
                "new_dim": {
                  "format": "integer",
                  "type": "integer"
                },
                "new_srid_in": {
                  "format": "integer",
                  "type": "integer"
                },
                "new_type": {
                  "format": "character varying",
                  "type": "string"
                },
                "schema_name": {
                  "format": "character varying",
                  "type": "string"
                },
                "table_name": {
                  "format": "character varying",
                  "type": "string"
                },
                "use_typmod": {
                  "format": "boolean",
                  "type": "boolean"
                }
              },
              "required": [
                "catalog_name",
                "schema_name",
                "table_name",
                "column_name",
                "new_srid_in",
                "new_type",
                "new_dim"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: catalog_name, schema_name, table_name, column_name, srid, type, dimension, use_typmod=true - Adds a geometry column to an existing table.",
        "tags": [
          "(rpc) addgeometrycolumn"
        ]
      }
    },
    "/rpc/st_geohash": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "maxchars",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geohash"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "maxchars": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geohash"
        ]
      }
    },
    "/rpc/st_distancesphere": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "radius",
            "required": true,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomlonlatA, geomlonlatB, radius=6371008 - Returns minimum distance in meters between two lon/lat geometries using a spherical earth model.",
        "tags": [
          "(rpc) st_distancesphere"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geomlonlatA, geomlonlatB, radius=6371008 - Returns minimum distance in meters between two lon/lat geometries using a spherical earth model.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "radius": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geom1",
                "geom2",
                "radius"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomlonlatA, geomlonlatB, radius=6371008 - Returns minimum distance in meters between two lon/lat geometries using a spherical earth model.",
        "tags": [
          "(rpc) st_distancesphere"
        ]
      }
    },
    "/rpc/delete_customer_address_direct": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "p_address_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "p_customer_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "p_address_id",
                "p_customer_id"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) delete_customer_address_direct"
        ]
      }
    },
    "/rpc/st_project": {
      "get": {
        "parameters": [
          {
            "format": "public.geography",
            "in": "query",
            "name": "geog",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "distance",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "azimuth",
            "required": true,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, distance, azimuth - Returns a point projected from a start point by a distance and bearing (azimuth).",
        "tags": [
          "(rpc) st_project"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1, distance, azimuth - Returns a point projected from a start point by a distance and bearing (azimuth).",
              "properties": {
                "azimuth": {
                  "format": "double precision",
                  "type": "number"
                },
                "distance": {
                  "format": "double precision",
                  "type": "number"
                },
                "geog": {
                  "format": "public.geography",
                  "type": "string"
                }
              },
              "required": [
                "geog",
                "distance",
                "azimuth"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, distance, azimuth - Returns a point projected from a start point by a distance and bearing (azimuth).",
        "tags": [
          "(rpc) st_project"
        ]
      }
    },
    "/rpc/get_barber_reviews": {
      "get": {
        "parameters": [
          {
            "format": "uuid",
            "in": "query",
            "name": "p_barber_id",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "p_limit",
            "required": false,
            "type": "integer"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "p_offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns barber reviews including services from the booking for context and trust",
        "tags": [
          "(rpc) get_barber_reviews"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Returns barber reviews including services from the booking for context and trust",
              "properties": {
                "p_barber_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "p_limit": {
                  "format": "integer",
                  "type": "integer"
                },
                "p_offset": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "required": [
                "p_barber_id"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns barber reviews including services from the booking for context and trust",
        "tags": [
          "(rpc) get_barber_reviews"
        ]
      }
    },
    "/rpc/st_multipointfromtext": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_multipointfromtext"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_multipointfromtext"
        ]
      }
    },
    "/rpc/geography": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geography"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geography"
        ]
      }
    },
    "/rpc/st_asmarc21": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "format",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_asmarc21"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "format": {
                  "format": "text",
                  "type": "string"
                },
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_asmarc21"
        ]
      }
    },
    "/rpc/st_polygonfromtext": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_polygonfromtext"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_polygonfromtext"
        ]
      }
    },
    "/rpc/st_centroid": {
      "get": {
        "parameters": [
          {
            "format": "public.geography",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "use_spheroid",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, use_spheroid=true - Returns the geometric center of a geometry.",
        "tags": [
          "(rpc) st_centroid"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1, use_spheroid=true - Returns the geometric center of a geometry.",
              "properties": {
                "": {
                  "format": "public.geography",
                  "type": "string"
                },
                "use_spheroid": {
                  "format": "boolean",
                  "type": "boolean"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, use_spheroid=true - Returns the geometric center of a geometry.",
        "tags": [
          "(rpc) st_centroid"
        ]
      }
    },
    "/rpc/st_force3d": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "zvalue",
            "required": false,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, Zvalue = 0.0 - Force the geometries into XYZ mode. This is an alias for ST_Force3DZ.",
        "tags": [
          "(rpc) st_force3d"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geomA, Zvalue = 0.0 - Force the geometries into XYZ mode. This is an alias for ST_Force3DZ.",
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "zvalue": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, Zvalue = 0.0 - Force the geometries into XYZ mode. This is an alias for ST_Force3DZ.",
        "tags": [
          "(rpc) st_force3d"
        ]
      }
    },
    "/rpc/st_linefromtext": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_linefromtext"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_linefromtext"
        ]
      }
    },
    "/rpc/is_barber": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) is_barber"
        ]
      }
    },
    "/rpc/st_within": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_within"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_within"
        ]
      }
    },
    "/rpc/st_point": {
      "get": {
        "parameters": [
          {
            "format": "double precision",
            "in": "query",
            "name": "",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "",
            "required": true,
            "type": "number"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "srid",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: x, y, srid=unknown - Creates a Point with X, Y and SRID values.",
        "tags": [
          "(rpc) st_point"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: x, y, srid=unknown - Creates a Point with X, Y and SRID values.",
              "properties": {
                "": {
                  "format": "double precision",
                  "type": "number"
                },
                "srid": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "required": [
                "",
                "",
                "srid"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: x, y, srid=unknown - Creates a Point with X, Y and SRID values.",
        "tags": [
          "(rpc) st_point"
        ]
      }
    },
    "/rpc/geometry_contains_3d": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_contains_3d"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_contains_3d"
        ]
      }
    },
    "/rpc/_st_crosses": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_crosses"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_crosses"
        ]
      }
    },
    "/rpc/update_tracking_metrics": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "p_booking_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "p_distance_km": {
                  "format": "numeric",
                  "type": "number"
                },
                "p_eta_minutes": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "required": [
                "p_booking_id",
                "p_distance_km",
                "p_eta_minutes"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) update_tracking_metrics"
        ]
      }
    },
    "/rpc/st_generatepoints": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "area",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "npoints",
            "required": true,
            "type": "integer"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "seed",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g, npoints, seed - Generates random points contained in a Polygon or MultiPolygon.",
        "tags": [
          "(rpc) st_generatepoints"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g, npoints, seed - Generates random points contained in a Polygon or MultiPolygon.",
              "properties": {
                "area": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "npoints": {
                  "format": "integer",
                  "type": "integer"
                },
                "seed": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "required": [
                "area",
                "npoints",
                "seed"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g, npoints, seed - Generates random points contained in a Polygon or MultiPolygon.",
        "tags": [
          "(rpc) st_generatepoints"
        ]
      }
    },
    "/rpc/st_3ddistance": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2 - Returns the 3D cartesian minimum distance (based on spatial ref) between two geometries in projected units.",
        "tags": [
          "(rpc) st_3ddistance"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1, g2 - Returns the 3D cartesian minimum distance (based on spatial ref) between two geometries in projected units.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2 - Returns the 3D cartesian minimum distance (based on spatial ref) between two geometries in projected units.",
        "tags": [
          "(rpc) st_3ddistance"
        ]
      }
    },
    "/rpc/st_geomfrommarc21": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "marc21xml",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfrommarc21"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "marc21xml": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "marc21xml"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfrommarc21"
        ]
      }
    },
    "/rpc/gettransactionid": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) gettransactionid"
        ]
      }
    },
    "/rpc/_st_3ddfullywithin": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "",
            "required": true,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_3ddfullywithin"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "double precision",
                  "type": "number"
                },
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2",
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_3ddfullywithin"
        ]
      }
    },
    "/rpc/geometry_within": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_within"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_within"
        ]
      }
    },
    "/rpc/geometry_le": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_le"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_le"
        ]
      }
    },
    "/rpc/st_multipolygonfromtext": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_multipolygonfromtext"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_multipolygonfromtext"
        ]
      }
    },
    "/rpc/postgis_geos_version": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns the version number of the GEOS library.",
        "tags": [
          "(rpc) postgis_geos_version"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Returns the version number of the GEOS library.",
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns the version number of the GEOS library.",
        "tags": [
          "(rpc) postgis_geos_version"
        ]
      }
    },
    "/rpc/st_geographyfromtext": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geographyfromtext"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geographyfromtext"
        ]
      }
    },
    "/rpc/st_astwkb": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry[]",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "bigint[]",
            "in": "query",
            "name": "ids",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "prec",
            "required": false,
            "type": "integer"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "prec_z",
            "required": false,
            "type": "integer"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "prec_m",
            "required": false,
            "type": "integer"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "with_sizes",
            "required": false,
            "type": "boolean"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "with_boxes",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_astwkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom": {
                  "format": "public.geometry[]",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "ids": {
                  "format": "bigint[]",
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                "prec": {
                  "format": "integer",
                  "type": "integer"
                },
                "prec_m": {
                  "format": "integer",
                  "type": "integer"
                },
                "prec_z": {
                  "format": "integer",
                  "type": "integer"
                },
                "with_boxes": {
                  "format": "boolean",
                  "type": "boolean"
                },
                "with_sizes": {
                  "format": "boolean",
                  "type": "boolean"
                }
              },
              "required": [
                "geom",
                "ids"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_astwkb"
        ]
      }
    },
    "/rpc/st_force4d": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "zvalue",
            "required": false,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "mvalue",
            "required": false,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, Zvalue = 0.0, Mvalue = 0.0 - Force the geometries into XYZM mode.",
        "tags": [
          "(rpc) st_force4d"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geomA, Zvalue = 0.0, Mvalue = 0.0 - Force the geometries into XYZM mode.",
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "mvalue": {
                  "format": "double precision",
                  "type": "number"
                },
                "zvalue": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, Zvalue = 0.0, Mvalue = 0.0 - Force the geometries into XYZM mode.",
        "tags": [
          "(rpc) st_force4d"
        ]
      }
    },
    "/rpc/update_service_radius": {
      "post": {
        "description": "Validates cooldown and radius range before updating.\nPrevents client-side clock manipulation.",
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Updates barber service radius with server-side timestamp (NOW()).\nValidates cooldown and radius range before updating.\nPrevents client-side clock manipulation.",
              "properties": {
                "barber_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "new_radius": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "required": [
                "barber_id",
                "new_radius"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Updates barber service radius with server-side timestamp (NOW()).",
        "tags": [
          "(rpc) update_service_radius"
        ]
      }
    },
    "/rpc/st_hasarc": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geometry",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA - Tests if a geometry contains a circular arc",
        "tags": [
          "(rpc) st_hasarc"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geomA - Tests if a geometry contains a circular arc",
              "properties": {
                "geometry": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geometry"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA - Tests if a geometry contains a circular arc",
        "tags": [
          "(rpc) st_hasarc"
        ]
      }
    },
    "/rpc/get_nearby_barbers": {
      "get": {
        "description": "Returns barbers within (radius_km × buffer_multiplier) straight-line distance.\nIncludes completed_bookings and total_bookings for each barber.\nExcludes barbers currently working on active bookings (accepted/on_the_way/arrived/in_progress).\nThe buffer_multiplier (default 1.5) accounts for road distance being longer than straight-line.\nResults are sorted by distance and include straight_line_distance_km for reference.",
        "parameters": [
          {
            "format": "double precision",
            "in": "query",
            "name": "customer_lat",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "customer_lng",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "radius_km",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "buffer_multiplier",
            "required": false,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Optimized geospatial search for nearby barbers with stats. ",
        "tags": [
          "(rpc) get_nearby_barbers"
        ]
      },
      "post": {
        "description": "Returns barbers within (radius_km × buffer_multiplier) straight-line distance.\nIncludes completed_bookings and total_bookings for each barber.\nExcludes barbers currently working on active bookings (accepted/on_the_way/arrived/in_progress).\nThe buffer_multiplier (default 1.5) accounts for road distance being longer than straight-line.\nResults are sorted by distance and include straight_line_distance_km for reference.",
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Optimized geospatial search for nearby barbers with stats. \nReturns barbers within (radius_km × buffer_multiplier) straight-line distance.\nIncludes completed_bookings and total_bookings for each barber.\nExcludes barbers currently working on active bookings (accepted/on_the_way/arrived/in_progress).\nThe buffer_multiplier (default 1.5) accounts for road distance being longer than straight-line.\nResults are sorted by distance and include straight_line_distance_km for reference.",
              "properties": {
                "buffer_multiplier": {
                  "format": "double precision",
                  "type": "number"
                },
                "customer_lat": {
                  "format": "double precision",
                  "type": "number"
                },
                "customer_lng": {
                  "format": "double precision",
                  "type": "number"
                },
                "radius_km": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "customer_lat",
                "customer_lng",
                "radius_km"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Optimized geospatial search for nearby barbers with stats. ",
        "tags": [
          "(rpc) get_nearby_barbers"
        ]
      }
    },
    "/rpc/postgis_constraint_dims": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "geomschema",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "geomtable",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "geomcolumn",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_constraint_dims"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geomcolumn": {
                  "format": "text",
                  "type": "string"
                },
                "geomschema": {
                  "format": "text",
                  "type": "string"
                },
                "geomtable": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "geomschema",
                "geomtable",
                "geomcolumn"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_constraint_dims"
        ]
      }
    },
    "/rpc/st_force3dm": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "mvalue",
            "required": false,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, Mvalue = 0.0 - Force the geometries into XYM mode.",
        "tags": [
          "(rpc) st_force3dm"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geomA, Mvalue = 0.0 - Force the geometries into XYM mode.",
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "mvalue": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, Mvalue = 0.0 - Force the geometries into XYM mode.",
        "tags": [
          "(rpc) st_force3dm"
        ]
      }
    },
    "/rpc/st_clipbybox2d": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.box2d",
            "in": "query",
            "name": "box",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, box - Computes the portion of a geometry falling within a rectangle.",
        "tags": [
          "(rpc) st_clipbybox2d"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom, box - Computes the portion of a geometry falling within a rectangle.",
              "properties": {
                "box": {
                  "format": "public.box2d",
                  "type": "string"
                },
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom",
                "box"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, box - Computes the portion of a geometry falling within a rectangle.",
        "tags": [
          "(rpc) st_clipbybox2d"
        ]
      }
    },
    "/rpc/geometry_overlaps": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_overlaps"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_overlaps"
        ]
      }
    },
    "/rpc/st_asgml": {
      "get": {
        "parameters": [
          {
            "format": "integer",
            "in": "query",
            "name": "version",
            "required": true,
            "type": "integer"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "maxdecimaldigits",
            "required": false,
            "type": "integer"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "options",
            "required": false,
            "type": "integer"
          },
          {
            "format": "text",
            "in": "query",
            "name": "nprefix",
            "required": false,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_asgml"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "id": {
                  "format": "text",
                  "type": "string"
                },
                "maxdecimaldigits": {
                  "format": "integer",
                  "type": "integer"
                },
                "nprefix": {
                  "format": "text",
                  "type": "string"
                },
                "options": {
                  "format": "integer",
                  "type": "integer"
                },
                "version": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "required": [
                "version",
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_asgml"
        ]
      }
    },
    "/rpc/st_reduceprecision": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "gridsize",
            "required": true,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g, gridsize - Returns a valid geometry with points rounded to a grid tolerance.",
        "tags": [
          "(rpc) st_reduceprecision"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g, gridsize - Returns a valid geometry with points rounded to a grid tolerance.",
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "gridsize": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geom",
                "gridsize"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g, gridsize - Returns a valid geometry with points rounded to a grid tolerance.",
        "tags": [
          "(rpc) st_reduceprecision"
        ]
      }
    },
    "/rpc/submit_review": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Submit a review for a completed booking. Uses SECURITY DEFINER to allow trigger-based rating updates.",
              "properties": {
                "p_booking_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "p_comment": {
                  "format": "text",
                  "type": "string"
                },
                "p_customer_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "p_images": {
                  "format": "text[]",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "p_rating": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "required": [
                "p_booking_id",
                "p_customer_id",
                "p_rating"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Submit a review for a completed booking. Uses SECURITY DEFINER to allow trigger-based rating updates.",
        "tags": [
          "(rpc) submit_review"
        ]
      }
    },
    "/rpc/st_geomcollfromwkb": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomcollfromwkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomcollfromwkb"
        ]
      }
    },
    "/rpc/st_geomfromtext": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfromtext"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfromtext"
        ]
      }
    },
    "/rpc/get_customer_bookings": {
      "get": {
        "parameters": [
          {
            "format": "uuid",
            "in": "query",
            "name": "p_customer_id",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "p_status",
            "required": false,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "p_limit",
            "required": false,
            "type": "integer"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "p_offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Fetch customer bookings with barber details including verified status, rating, and completed jobs count for UI consistency",
        "tags": [
          "(rpc) get_customer_bookings"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Fetch customer bookings with barber details including verified status, rating, and completed jobs count for UI consistency",
              "properties": {
                "p_customer_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "p_limit": {
                  "format": "integer",
                  "type": "integer"
                },
                "p_offset": {
                  "format": "integer",
                  "type": "integer"
                },
                "p_status": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "p_customer_id"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Fetch customer bookings with barber details including verified status, rating, and completed jobs count for UI consistency",
        "tags": [
          "(rpc) get_customer_bookings"
        ]
      }
    },
    "/rpc/st_unaryunion": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "gridsize",
            "required": false,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, gridSize = -1 - Computes the union of the components of a single geometry.",
        "tags": [
          "(rpc) st_unaryunion"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom, gridSize = -1 - Computes the union of the components of a single geometry.",
              "properties": {
                "": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "gridsize": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, gridSize = -1 - Computes the union of the components of a single geometry.",
        "tags": [
          "(rpc) st_unaryunion"
        ]
      }
    },
    "/rpc/postgis_constraint_type": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "geomschema",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "geomtable",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "geomcolumn",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_constraint_type"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geomcolumn": {
                  "format": "text",
                  "type": "string"
                },
                "geomschema": {
                  "format": "text",
                  "type": "string"
                },
                "geomtable": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "geomschema",
                "geomtable",
                "geomcolumn"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_constraint_type"
        ]
      }
    },
    "/rpc/st_node": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "g",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom - Nodes a collection of lines.",
        "tags": [
          "(rpc) st_node"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom - Nodes a collection of lines.",
              "properties": {
                "g": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "g"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom - Nodes a collection of lines.",
        "tags": [
          "(rpc) st_node"
        ]
      }
    },
    "/rpc/st_geomfromtwkb": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfromtwkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfromtwkb"
        ]
      }
    },
    "/rpc/st_tileenvelope": {
      "get": {
        "parameters": [
          {
            "format": "integer",
            "in": "query",
            "name": "zoom",
            "required": true,
            "type": "integer"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "x",
            "required": true,
            "type": "integer"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "y",
            "required": true,
            "type": "integer"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "bounds",
            "required": false,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "margin",
            "required": false,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: tileZoom, tileX, tileY, bounds=SRID=3857;LINESTRING(-20037508.342789 -20037508.342789,20037508.342789 20037508.342789), margin=0.0 - Creates a rectangular Polygon in Web Mercator (SRID:3857) using the XYZ tile system.",
        "tags": [
          "(rpc) st_tileenvelope"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: tileZoom, tileX, tileY, bounds=SRID=3857;LINESTRING(-20037508.342789 -20037508.342789,20037508.342789 20037508.342789), margin=0.0 - Creates a rectangular Polygon in Web Mercator (SRID:3857) using the XYZ tile system.",
              "properties": {
                "bounds": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "margin": {
                  "format": "double precision",
                  "type": "number"
                },
                "x": {
                  "format": "integer",
                  "type": "integer"
                },
                "y": {
                  "format": "integer",
                  "type": "integer"
                },
                "zoom": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "required": [
                "zoom",
                "x",
                "y"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: tileZoom, tileX, tileY, bounds=SRID=3857;LINESTRING(-20037508.342789 -20037508.342789,20037508.342789 20037508.342789), margin=0.0 - Creates a rectangular Polygon in Web Mercator (SRID:3857) using the XYZ tile system.",
        "tags": [
          "(rpc) st_tileenvelope"
        ]
      }
    },
    "/rpc/st_intersects": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_intersects"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_intersects"
        ]
      }
    },
    "/rpc/owns_barbershop": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "shop_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "shop_id"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) owns_barbershop"
        ]
      }
    },
    "/rpc/st_voronoipolygons": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "g1",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "tolerance",
            "required": false,
            "type": "number"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "extend_to",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, tolerance, extend_to - Returns the cells of the Voronoi diagram of the vertices of a geometry.",
        "tags": [
          "(rpc) st_voronoipolygons"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1, tolerance, extend_to - Returns the cells of the Voronoi diagram of the vertices of a geometry.",
              "properties": {
                "extend_to": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "g1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "tolerance": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "g1"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, tolerance, extend_to - Returns the cells of the Voronoi diagram of the vertices of a geometry.",
        "tags": [
          "(rpc) st_voronoipolygons"
        ]
      }
    },
    "/rpc/apply_voucher_to_booking": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Applies voucher to booking. Booking linkage is tracked in booking_vouchers table, not user_vouchers.",
              "properties": {
                "p_booking_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "p_discount_applied": {
                  "format": "numeric",
                  "type": "number"
                },
                "p_final_total": {
                  "format": "numeric",
                  "type": "number"
                },
                "p_original_total": {
                  "format": "numeric",
                  "type": "number"
                },
                "p_user_voucher_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "p_booking_id",
                "p_user_voucher_id",
                "p_original_total",
                "p_discount_applied",
                "p_final_total"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Applies voucher to booking. Booking linkage is tracked in booking_vouchers table, not user_vouchers.",
        "tags": [
          "(rpc) apply_voucher_to_booking"
        ]
      }
    },
    "/rpc/geometry_right": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_right"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_right"
        ]
      }
    },
    "/rpc/st_asx3d": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "maxdecimaldigits",
            "required": false,
            "type": "integer"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "options",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_asx3d"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "maxdecimaldigits": {
                  "format": "integer",
                  "type": "integer"
                },
                "options": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_asx3d"
        ]
      }
    },
    "/rpc/st_snap": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "",
            "required": true,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: input, reference, tolerance - Snap segments and vertices of input geometry to vertices of a reference geometry.",
        "tags": [
          "(rpc) st_snap"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: input, reference, tolerance - Snap segments and vertices of input geometry to vertices of a reference geometry.",
              "properties": {
                "": {
                  "format": "double precision",
                  "type": "number"
                },
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2",
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: input, reference, tolerance - Snap segments and vertices of input geometry to vertices of a reference geometry.",
        "tags": [
          "(rpc) st_snap"
        ]
      }
    },
    "/rpc/postgis_constraint_srid": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "geomschema",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "geomtable",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "geomcolumn",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_constraint_srid"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geomcolumn": {
                  "format": "text",
                  "type": "string"
                },
                "geomschema": {
                  "format": "text",
                  "type": "string"
                },
                "geomtable": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "geomschema",
                "geomtable",
                "geomcolumn"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_constraint_srid"
        ]
      }
    },
    "/rpc/create_booking": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "p_barber_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "p_barbershop_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "p_customer_address": {
                  "format": "jsonb"
                },
                "p_customer_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "p_customer_notes": {
                  "format": "text",
                  "type": "string"
                },
                "p_discount_amount": {
                  "format": "numeric",
                  "type": "number"
                },
                "p_payment_method": {
                  "format": "text",
                  "type": "string"
                },
                "p_scheduled_date": {
                  "format": "date",
                  "type": "string"
                },
                "p_scheduled_time": {
                  "format": "time without time zone",
                  "type": "string"
                },
                "p_service_type": {
                  "format": "text",
                  "type": "string"
                },
                "p_services": {
                  "format": "jsonb"
                },
                "p_travel_fee": {
                  "format": "numeric",
                  "type": "number"
                }
              },
              "required": [
                "p_customer_id",
                "p_barber_id",
                "p_services",
                "p_scheduled_date",
                "p_scheduled_time",
                "p_service_type",
                "p_barbershop_id",
                "p_customer_address",
                "p_customer_notes",
                "p_payment_method",
                "p_travel_fee",
                "p_discount_amount"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) create_booking"
        ]
      }
    },
    "/rpc/_postgis_selectivity": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "att_name": {
                  "format": "text",
                  "type": "string"
                },
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "mode": {
                  "format": "text",
                  "type": "string"
                },
                "tbl": {
                  "format": "regclass",
                  "type": "string"
                }
              },
              "required": [
                "tbl",
                "att_name",
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _postgis_selectivity"
        ]
      }
    },
    "/rpc/populate_geometry_columns": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: relation_oid, use_typmod=true - Ensures geometry columns are defined with type modifiers or have appropriate spatial constraints.",
              "properties": {
                "tbl_oid": {
                  "format": "oid",
                  "type": "string"
                },
                "use_typmod": {
                  "format": "boolean",
                  "type": "boolean"
                }
              },
              "required": [
                "tbl_oid"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: relation_oid, use_typmod=true - Ensures geometry columns are defined with type modifiers or have appropriate spatial constraints.",
        "tags": [
          "(rpc) populate_geometry_columns"
        ]
      }
    },
    "/rpc/st_3ddwithin": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "",
            "required": true,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_3ddwithin"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "double precision",
                  "type": "number"
                },
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2",
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_3ddwithin"
        ]
      }
    },
    "/rpc/st_longestline": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2 - Returns the 2D longest line between two geometries.",
        "tags": [
          "(rpc) st_longestline"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1, g2 - Returns the 2D longest line between two geometries.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2 - Returns the 2D longest line between two geometries.",
        "tags": [
          "(rpc) st_longestline"
        ]
      }
    },
    "/rpc/st_lineinterpolatepoints": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "",
            "required": true,
            "type": "number"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "repeat",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: a_linestring, a_fraction, repeat - Returns points interpolated along a line at a fractional interval.",
        "tags": [
          "(rpc) st_lineinterpolatepoints"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: a_linestring, a_fraction, repeat - Returns points interpolated along a line at a fractional interval.",
              "properties": {
                "": {
                  "format": "double precision",
                  "type": "number"
                },
                "repeat": {
                  "format": "boolean",
                  "type": "boolean"
                }
              },
              "required": [
                "",
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: a_linestring, a_fraction, repeat - Returns points interpolated along a line at a fractional interval.",
        "tags": [
          "(rpc) st_lineinterpolatepoints"
        ]
      }
    },
    "/rpc/st_3dshortestline": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2 - Returns the 3D shortest line between two geometries",
        "tags": [
          "(rpc) st_3dshortestline"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1, g2 - Returns the 3D shortest line between two geometries",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2 - Returns the 3D shortest line between two geometries",
        "tags": [
          "(rpc) st_3dshortestline"
        ]
      }
    },
    "/rpc/st_3dintersects": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_3dintersects"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_3dintersects"
        ]
      }
    },
    "/rpc/geometry_contained_3d": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_contained_3d"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_contained_3d"
        ]
      }
    },
    "/rpc/st_sharedpaths": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: lineal1, lineal2 - Returns a collection containing paths shared by the two input linestrings/multilinestrings.",
        "tags": [
          "(rpc) st_sharedpaths"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: lineal1, lineal2 - Returns a collection containing paths shared by the two input linestrings/multilinestrings.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: lineal1, lineal2 - Returns a collection containing paths shared by the two input linestrings/multilinestrings.",
        "tags": [
          "(rpc) st_sharedpaths"
        ]
      }
    },
    "/rpc/_st_dwithin": {
      "get": {
        "parameters": [
          {
            "format": "public.geography",
            "in": "query",
            "name": "geog1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geography",
            "in": "query",
            "name": "geog2",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "tolerance",
            "required": true,
            "type": "number"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "use_spheroid",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_dwithin"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geog1": {
                  "format": "public.geography",
                  "type": "string"
                },
                "geog2": {
                  "format": "public.geography",
                  "type": "string"
                },
                "tolerance": {
                  "format": "double precision",
                  "type": "number"
                },
                "use_spheroid": {
                  "format": "boolean",
                  "type": "boolean"
                }
              },
              "required": [
                "geog1",
                "geog2",
                "tolerance"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_dwithin"
        ]
      }
    },
    "/rpc/_postgis_pgsql_version": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _postgis_pgsql_version"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _postgis_pgsql_version"
        ]
      }
    },
    "/rpc/st_mpointfromtext": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_mpointfromtext"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_mpointfromtext"
        ]
      }
    },
    "/rpc/postgis_libjson_version": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_libjson_version"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_libjson_version"
        ]
      }
    },
    "/rpc/geometry_above": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_above"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_above"
        ]
      }
    },
    "/rpc/st_3dmaxdistance": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2 - Returns the 3D cartesian maximum distance (based on spatial ref) between two geometries in projected units.",
        "tags": [
          "(rpc) st_3dmaxdistance"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1, g2 - Returns the 3D cartesian maximum distance (based on spatial ref) between two geometries in projected units.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2 - Returns the 3D cartesian maximum distance (based on spatial ref) between two geometries in projected units.",
        "tags": [
          "(rpc) st_3dmaxdistance"
        ]
      }
    },
    "/rpc/st_locatebetweenelevations": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geometry",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "fromelevation",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "toelevation",
            "required": true,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, elevation_start, elevation_end - Returns the portions of a geometry that lie in an elevation (Z) range.",
        "tags": [
          "(rpc) st_locatebetweenelevations"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom, elevation_start, elevation_end - Returns the portions of a geometry that lie in an elevation (Z) range.",
              "properties": {
                "fromelevation": {
                  "format": "double precision",
                  "type": "number"
                },
                "geometry": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "toelevation": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geometry",
                "fromelevation",
                "toelevation"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, elevation_start, elevation_end - Returns the portions of a geometry that lie in an elevation (Z) range.",
        "tags": [
          "(rpc) st_locatebetweenelevations"
        ]
      }
    },
    "/rpc/st_interpolatepoint": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "line",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "point",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: linear_geom_with_measure, point - Returns the interpolated measure of a geometry closest to a point.",
        "tags": [
          "(rpc) st_interpolatepoint"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: linear_geom_with_measure, point - Returns the interpolated measure of a geometry closest to a point.",
              "properties": {
                "line": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "point": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "line",
                "point"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: linear_geom_with_measure, point - Returns the interpolated measure of a geometry closest to a point.",
        "tags": [
          "(rpc) st_interpolatepoint"
        ]
      }
    },
    "/rpc/st_split": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: input, blade - Returns a collection of geometries created by splitting a geometry by another geometry.",
        "tags": [
          "(rpc) st_split"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: input, blade - Returns a collection of geometries created by splitting a geometry by another geometry.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: input, blade - Returns a collection of geometries created by splitting a geometry by another geometry.",
        "tags": [
          "(rpc) st_split"
        ]
      }
    },
    "/rpc/st_relate": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_relate"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                },
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2",
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_relate"
        ]
      }
    },
    "/rpc/st_transform": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "from_proj",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "to_srid",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, from_proj, to_srid - Return a new geometry with coordinates transformed to a different spatial reference system.",
        "tags": [
          "(rpc) st_transform"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom, from_proj, to_srid - Return a new geometry with coordinates transformed to a different spatial reference system.",
              "properties": {
                "from_proj": {
                  "format": "text",
                  "type": "string"
                },
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "to_srid": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "required": [
                "geom",
                "from_proj",
                "to_srid"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, from_proj, to_srid - Return a new geometry with coordinates transformed to a different spatial reference system.",
        "tags": [
          "(rpc) st_transform"
        ]
      }
    },
    "/rpc/st_makevalid": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "params",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: input, params - Attempts to make an invalid geometry valid without losing vertices.",
        "tags": [
          "(rpc) st_makevalid"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: input, params - Attempts to make an invalid geometry valid without losing vertices.",
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "params": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "geom",
                "params"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: input, params - Attempts to make an invalid geometry valid without losing vertices.",
        "tags": [
          "(rpc) st_makevalid"
        ]
      }
    },
    "/rpc/st_symdifference": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "gridsize",
            "required": false,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, geomB, gridSize = -1 - Computes a geometry representing the portions of geometries A and B that do not intersect.",
        "tags": [
          "(rpc) st_symdifference"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geomA, geomB, gridSize = -1 - Computes a geometry representing the portions of geometries A and B that do not intersect.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "gridsize": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, geomB, gridSize = -1 - Computes a geometry representing the portions of geometries A and B that do not intersect.",
        "tags": [
          "(rpc) st_symdifference"
        ]
      }
    },
    "/rpc/st_geogfromwkb": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geogfromwkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geogfromwkb"
        ]
      }
    },
    "/rpc/st_wkbtosql": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "wkb",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_wkbtosql"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "wkb": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                "wkb"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_wkbtosql"
        ]
      }
    },
    "/rpc/st_boundingdiagonal": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "fits",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, fits=false - Returns the diagonal of a geometrys bounding box.",
        "tags": [
          "(rpc) st_boundingdiagonal"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom, fits=false - Returns the diagonal of a geometrys bounding box.",
              "properties": {
                "fits": {
                  "format": "boolean",
                  "type": "boolean"
                },
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, fits=false - Returns the diagonal of a geometrys bounding box.",
        "tags": [
          "(rpc) st_boundingdiagonal"
        ]
      }
    },
    "/rpc/st_forcesfs": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, version - Force the geometries to use SFS 1.1 geometry types only.",
        "tags": [
          "(rpc) st_forcesfs"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geomA, version - Force the geometries to use SFS 1.1 geometry types only.",
              "properties": {
                "": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "version": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "",
                "version"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, version - Force the geometries to use SFS 1.1 geometry types only.",
        "tags": [
          "(rpc) st_forcesfs"
        ]
      }
    },
    "/rpc/add_customer_address": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Adds a new address for a customer",
              "properties": {
                "p_address_line1": {
                  "format": "text",
                  "type": "string"
                },
                "p_address_line2": {
                  "format": "text",
                  "type": "string"
                },
                "p_city": {
                  "format": "text",
                  "type": "string"
                },
                "p_is_default": {
                  "format": "boolean",
                  "type": "boolean"
                },
                "p_label": {
                  "format": "text",
                  "type": "string"
                },
                "p_latitude": {
                  "format": "double precision",
                  "type": "number"
                },
                "p_longitude": {
                  "format": "double precision",
                  "type": "number"
                },
                "p_postal_code": {
                  "format": "text",
                  "type": "string"
                },
                "p_state": {
                  "format": "text",
                  "type": "string"
                },
                "p_user_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "p_user_id",
                "p_label",
                "p_address_line1",
                "p_city",
                "p_state"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Adds a new address for a customer",
        "tags": [
          "(rpc) add_customer_address"
        ]
      }
    },
    "/rpc/postgis_lib_build_date": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns build date of the PostGIS library.",
        "tags": [
          "(rpc) postgis_lib_build_date"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Returns build date of the PostGIS library.",
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns build date of the PostGIS library.",
        "tags": [
          "(rpc) postgis_lib_build_date"
        ]
      }
    },
    "/rpc/geomfromewkt": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geomfromewkt"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geomfromewkt"
        ]
      }
    },
    "/rpc/approve_barber_application": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "application_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "application_id"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) approve_barber_application"
        ]
      }
    },
    "/rpc/st_subdivide": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "maxvertices",
            "required": false,
            "type": "integer"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "gridsize",
            "required": false,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, max_vertices=256, gridSize = -1 - Computes a rectilinear subdivision of a geometry.",
        "tags": [
          "(rpc) st_subdivide"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom, max_vertices=256, gridSize = -1 - Computes a rectilinear subdivision of a geometry.",
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "gridsize": {
                  "format": "double precision",
                  "type": "number"
                },
                "maxvertices": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, max_vertices=256, gridSize = -1 - Computes a rectilinear subdivision of a geometry.",
        "tags": [
          "(rpc) st_subdivide"
        ]
      }
    },
    "/rpc/get_barbershop_reviews": {
      "get": {
        "parameters": [
          {
            "format": "uuid",
            "in": "query",
            "name": "p_barbershop_id",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "p_limit",
            "required": false,
            "type": "integer"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "p_offset",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns barbershop reviews including services from the booking for context and trust",
        "tags": [
          "(rpc) get_barbershop_reviews"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Returns barbershop reviews including services from the booking for context and trust",
              "properties": {
                "p_barbershop_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "p_limit": {
                  "format": "integer",
                  "type": "integer"
                },
                "p_offset": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "required": [
                "p_barbershop_id"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns barbershop reviews including services from the booking for context and trust",
        "tags": [
          "(rpc) get_barbershop_reviews"
        ]
      }
    },
    "/rpc/cache_route": {
      "post": {
        "description": "Returns the cache entry UUID.",
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Stores a route in the cache. Uses UPSERT to update existing entries.\nReturns the cache entry UUID.",
              "properties": {
                "p_cache_duration_days": {
                  "format": "integer",
                  "type": "integer"
                },
                "p_destination_lat": {
                  "format": "double precision",
                  "type": "number"
                },
                "p_destination_lng": {
                  "format": "double precision",
                  "type": "number"
                },
                "p_distance_km": {
                  "format": "numeric",
                  "type": "number"
                },
                "p_duration_minutes": {
                  "format": "numeric",
                  "type": "number"
                },
                "p_origin_lat": {
                  "format": "double precision",
                  "type": "number"
                },
                "p_origin_lng": {
                  "format": "double precision",
                  "type": "number"
                },
                "p_profile": {
                  "format": "character varying",
                  "type": "string"
                }
              },
              "required": [
                "p_origin_lat",
                "p_origin_lng",
                "p_destination_lat",
                "p_destination_lng",
                "p_distance_km",
                "p_duration_minutes"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Stores a route in the cache. Uses UPSERT to update existing entries.",
        "tags": [
          "(rpc) cache_route"
        ]
      }
    },
    "/rpc/_st_coveredby": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_coveredby"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_coveredby"
        ]
      }
    },
    "/rpc/st_shortestline": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom1, geom2 - Returns the 2D shortest line between two geometries",
        "tags": [
          "(rpc) st_shortestline"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom1, geom2 - Returns the 2D shortest line between two geometries",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom1, geom2 - Returns the 2D shortest line between two geometries",
        "tags": [
          "(rpc) st_shortestline"
        ]
      }
    },
    "/rpc/_st_within": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_within"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_within"
        ]
      }
    },
    "/rpc/st_setsrid": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "srid",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, srid - Set the SRID on a geometry.",
        "tags": [
          "(rpc) st_setsrid"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom, srid - Set the SRID on a geometry.",
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "srid": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "required": [
                "geom",
                "srid"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, srid - Set the SRID on a geometry.",
        "tags": [
          "(rpc) st_setsrid"
        ]
      }
    },
    "/rpc/_postgis_scripts_pgsql_version": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _postgis_scripts_pgsql_version"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _postgis_scripts_pgsql_version"
        ]
      }
    },
    "/rpc/st_linefromencodedpolyline": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "txtin",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "nprecision",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_linefromencodedpolyline"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "nprecision": {
                  "format": "integer",
                  "type": "integer"
                },
                "txtin": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "txtin"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_linefromencodedpolyline"
        ]
      }
    },
    "/rpc/st_multipolyfromwkb": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_multipolyfromwkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_multipolyfromwkb"
        ]
      }
    },
    "/rpc/st_mpolyfromtext": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_mpolyfromtext"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_mpolyfromtext"
        ]
      }
    },
    "/rpc/enablelongtransactions": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Enables long transaction support.",
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Enables long transaction support.",
        "tags": [
          "(rpc) enablelongtransactions"
        ]
      }
    },
    "/rpc/st_geogfromtext": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geogfromtext"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geogfromtext"
        ]
      }
    },
    "/rpc/st_hexagon": {
      "get": {
        "parameters": [
          {
            "format": "double precision",
            "in": "query",
            "name": "size",
            "required": true,
            "type": "number"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "cell_i",
            "required": true,
            "type": "integer"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "cell_j",
            "required": true,
            "type": "integer"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "origin",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: size, cell_i, cell_j, origin - Returns a single hexagon, using the provided edge size and cell coordinate within the hexagon grid space.",
        "tags": [
          "(rpc) st_hexagon"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: size, cell_i, cell_j, origin - Returns a single hexagon, using the provided edge size and cell coordinate within the hexagon grid space.",
              "properties": {
                "cell_i": {
                  "format": "integer",
                  "type": "integer"
                },
                "cell_j": {
                  "format": "integer",
                  "type": "integer"
                },
                "origin": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "size": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "size",
                "cell_i",
                "cell_j"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: size, cell_i, cell_j, origin - Returns a single hexagon, using the provided edge size and cell coordinate within the hexagon grid space.",
        "tags": [
          "(rpc) st_hexagon"
        ]
      }
    },
    "/rpc/_postgis_stats": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                },
                "att_name": {
                  "format": "text",
                  "type": "string"
                },
                "tbl": {
                  "format": "regclass",
                  "type": "string"
                }
              },
              "required": [
                "tbl",
                "att_name"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _postgis_stats"
        ]
      }
    },
    "/rpc/st_coorddim": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geometry",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA - Return the coordinate dimension of a geometry.",
        "tags": [
          "(rpc) st_coorddim"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geomA - Return the coordinate dimension of a geometry.",
              "properties": {
                "geometry": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geometry"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA - Return the coordinate dimension of a geometry.",
        "tags": [
          "(rpc) st_coorddim"
        ]
      }
    },
    "/rpc/use_voucher": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Mark a user voucher as used for a booking",
              "properties": {
                "p_booking_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "p_user_voucher_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "p_user_voucher_id",
                "p_booking_id"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Mark a user voucher as used for a booking",
        "tags": [
          "(rpc) use_voucher"
        ]
      }
    },
    "/rpc/st_3ddfullywithin": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "",
            "required": true,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_3ddfullywithin"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "double precision",
                  "type": "number"
                },
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2",
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_3ddfullywithin"
        ]
      }
    },
    "/rpc/update_booking_status": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Update booking status with proper timestamp tracking. Fixed ambiguous column reference.",
              "properties": {
                "p_booking_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "p_new_status": {
                  "format": "public.booking_status",
                  "type": "string"
                },
                "p_notes": {
                  "format": "text",
                  "type": "string"
                },
                "p_updated_by": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "p_booking_id",
                "p_new_status"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Update booking status with proper timestamp tracking. Fixed ambiguous column reference.",
        "tags": [
          "(rpc) update_booking_status"
        ]
      }
    },
    "/rpc/postgis_wagyu_version": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns the version number of the internal Wagyu library.",
        "tags": [
          "(rpc) postgis_wagyu_version"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Returns the version number of the internal Wagyu library.",
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns the version number of the internal Wagyu library.",
        "tags": [
          "(rpc) postgis_wagyu_version"
        ]
      }
    },
    "/rpc/geometry_overlaps_3d": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_overlaps_3d"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_overlaps_3d"
        ]
      }
    },
    "/rpc/_postgis_index_extent": {
      "get": {
        "parameters": [
          {
            "format": "regclass",
            "in": "query",
            "name": "tbl",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "col",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _postgis_index_extent"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "col": {
                  "format": "text",
                  "type": "string"
                },
                "tbl": {
                  "format": "regclass",
                  "type": "string"
                }
              },
              "required": [
                "tbl",
                "col"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _postgis_index_extent"
        ]
      }
    },
    "/rpc/postgis_svn_version": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_svn_version"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_svn_version"
        ]
      }
    },
    "/rpc/st_pointfromtext": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_pointfromtext"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_pointfromtext"
        ]
      }
    },
    "/rpc/award_points": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Award points to a user with transaction logging. Returns success status and new balance.",
              "properties": {
                "p_amount": {
                  "format": "integer",
                  "type": "integer"
                },
                "p_metadata": {
                  "format": "jsonb"
                },
                "p_type": {
                  "format": "text",
                  "type": "string"
                },
                "p_user_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "p_user_id",
                "p_amount",
                "p_type"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Award points to a user with transaction logging. Returns success status and new balance.",
        "tags": [
          "(rpc) award_points"
        ]
      }
    }
  },
  "definitions": {
    "barbershops": {
      "description": "Physical barbershop locations",
      "required": [
        "id",
        "owner_id",
        "name",
        "address_line1",
        "city",
        "state",
        "location"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "owner_id": {
          "description": "Note:\nThis is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "name": {
          "format": "text",
          "type": "string"
        },
        "description": {
          "format": "text",
          "type": "string"
        },
        "logo_url": {
          "format": "text",
          "type": "string"
        },
        "cover_images": {
          "format": "text[]",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "phone_number": {
          "format": "text",
          "type": "string"
        },
        "email": {
          "format": "text",
          "type": "string"
        },
        "website_url": {
          "format": "text",
          "type": "string"
        },
        "address_line1": {
          "format": "text",
          "type": "string"
        },
        "address_line2": {
          "format": "text",
          "type": "string"
        },
        "city": {
          "format": "text",
          "type": "string"
        },
        "state": {
          "format": "text",
          "type": "string"
        },
        "postal_code": {
          "format": "text",
          "type": "string"
        },
        "country": {
          "default": "Malaysia",
          "format": "text",
          "type": "string"
        },
        "location": {
          "format": "public.geography(Point,4326)",
          "type": "string"
        },
        "opening_hours": {
          "format": "jsonb"
        },
        "is_open_now": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "verification_status": {
          "default": "pending",
          "enum": [
            "unverified",
            "pending",
            "verified",
            "rejected"
          ],
          "format": "public.verification_status",
          "type": "string"
        },
        "ssm_number": {
          "format": "text",
          "type": "string"
        },
        "rating": {
          "default": 0.0,
          "format": "numeric",
          "type": "number"
        },
        "total_reviews": {
          "default": 0,
          "format": "integer",
          "type": "integer"
        },
        "total_bookings": {
          "default": 0,
          "format": "integer",
          "type": "integer"
        },
        "amenities": {
          "format": "text[]",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "payment_methods": {
          "format": "text[]",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "is_active": {
          "default": true,
          "format": "boolean",
          "type": "boolean"
        },
        "is_featured": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "is_verified": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "payments": {
      "description": "Payment transactions",
      "required": [
        "id",
        "booking_id",
        "customer_id",
        "amount",
        "payment_method"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "booking_id": {
          "description": "Note:\nThis is a Foreign Key to `bookings.id`.<fk table='bookings' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "customer_id": {
          "description": "Note:\nThis is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "amount": {
          "format": "numeric",
          "type": "number"
        },
        "currency": {
          "default": "MYR",
          "format": "text",
          "type": "string"
        },
        "payment_method": {
          "enum": [
            "cash",
            "card",
            "fpx",
            "ewallet_tng",
            "ewallet_grab",
            "ewallet_boost",
            "ewallet_shopee"
          ],
          "format": "public.payment_method",
          "type": "string"
        },
        "payment_status": {
          "default": "pending",
          "enum": [
            "pending",
            "processing",
            "completed",
            "failed",
            "refunded",
            "cancelled"
          ],
          "format": "public.payment_status",
          "type": "string"
        },
        "stripe_payment_id": {
          "format": "text",
          "type": "string"
        },
        "stripe_payment_intent_id": {
          "format": "text",
          "type": "string"
        },
        "billplz_bill_id": {
          "format": "text",
          "type": "string"
        },
        "receipt_url": {
          "format": "text",
          "type": "string"
        },
        "refund_amount": {
          "format": "numeric",
          "type": "number"
        },
        "refunded_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "refund_reason": {
          "format": "text",
          "type": "string"
        },
        "metadata": {
          "format": "jsonb"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "spatial_ref_sys": {
      "required": [
        "srid"
      ],
      "properties": {
        "srid": {
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "integer",
          "type": "integer"
        },
        "auth_name": {
          "format": "character varying",
          "maxLength": 256,
          "type": "string"
        },
        "auth_srid": {
          "format": "integer",
          "type": "integer"
        },
        "srtext": {
          "format": "character varying",
          "maxLength": 2048,
          "type": "string"
        },
        "proj4text": {
          "format": "character varying",
          "maxLength": 2048,
          "type": "string"
        }
      },
      "type": "object"
    },
    "payouts": {
      "description": "Payouts to barbers/shops",
      "required": [
        "id",
        "amount",
        "period_start",
        "period_end"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "barber_id": {
          "description": "Note:\nThis is a Foreign Key to `barbers.id`.<fk table='barbers' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "barbershop_id": {
          "description": "Note:\nThis is a Foreign Key to `barbershops.id`.<fk table='barbershops' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "amount": {
          "format": "numeric",
          "type": "number"
        },
        "currency": {
          "default": "MYR",
          "format": "text",
          "type": "string"
        },
        "status": {
          "default": "pending",
          "enum": [
            "pending",
            "processing",
            "completed",
            "failed",
            "refunded",
            "cancelled"
          ],
          "format": "public.payment_status",
          "type": "string"
        },
        "bank_name": {
          "format": "text",
          "type": "string"
        },
        "bank_account_number": {
          "format": "text",
          "type": "string"
        },
        "bank_account_name": {
          "format": "text",
          "type": "string"
        },
        "stripe_payout_id": {
          "format": "text",
          "type": "string"
        },
        "stripe_transfer_id": {
          "format": "text",
          "type": "string"
        },
        "period_start": {
          "format": "date",
          "type": "string"
        },
        "period_end": {
          "format": "date",
          "type": "string"
        },
        "bookings_count": {
          "format": "integer",
          "type": "integer"
        },
        "total_earnings": {
          "format": "numeric",
          "type": "number"
        },
        "platform_fee": {
          "format": "numeric",
          "type": "number"
        },
        "paid_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "otp_requests": {
      "description": "Tracks OTP SMS requests for rate limiting and abuse prevention",
      "required": [
        "id",
        "phone_number"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "phone_number": {
          "description": "Phone number that received the OTP",
          "format": "text",
          "type": "string"
        },
        "message_sid": {
          "description": "Twilio message SID for tracking",
          "format": "text",
          "type": "string"
        },
        "status": {
          "description": "Twilio message status",
          "format": "text",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "barbershop_onboarding": {
      "required": [
        "id",
        "user_id",
        "name",
        "description",
        "phone",
        "email",
        "address",
        "logo_url",
        "cover_urls",
        "ssm_url",
        "license_url",
        "operating_hours",
        "staff",
        "services",
        "bank_name",
        "bank_account_number",
        "bank_account_name"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "user_id": {
          "format": "uuid",
          "type": "string"
        },
        "name": {
          "format": "character varying",
          "maxLength": 100,
          "type": "string"
        },
        "description": {
          "format": "text",
          "type": "string"
        },
        "phone": {
          "format": "character varying",
          "maxLength": 20,
          "type": "string"
        },
        "email": {
          "format": "character varying",
          "maxLength": 255,
          "type": "string"
        },
        "address": {
          "format": "text",
          "type": "string"
        },
        "city": {
          "format": "character varying",
          "maxLength": 100,
          "type": "string"
        },
        "state": {
          "format": "character varying",
          "maxLength": 100,
          "type": "string"
        },
        "postcode": {
          "format": "character varying",
          "maxLength": 10,
          "type": "string"
        },
        "latitude": {
          "format": "numeric",
          "type": "number"
        },
        "longitude": {
          "format": "numeric",
          "type": "number"
        },
        "logo_url": {
          "format": "text",
          "type": "string"
        },
        "cover_urls": {
          "format": "text[]",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ssm_url": {
          "format": "text",
          "type": "string"
        },
        "license_url": {
          "format": "text",
          "type": "string"
        },
        "operating_hours": {
          "format": "jsonb"
        },
        "staff": {
          "format": "jsonb"
        },
        "services": {
          "format": "jsonb"
        },
        "amenities": {
          "format": "text[]",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "bank_name": {
          "format": "text",
          "type": "string"
        },
        "bank_account_number": {
          "format": "text",
          "type": "string"
        },
        "bank_account_name": {
          "format": "text",
          "type": "string"
        },
        "status": {
          "default": "pending",
          "format": "character varying",
          "maxLength": 50,
          "type": "string"
        },
        "verification_notes": {
          "format": "text",
          "type": "string"
        },
        "reviewed_by": {
          "format": "uuid",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "submitted_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "approved_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "rejected_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "metadata": {
          "format": "jsonb"
        }
      },
      "type": "object"
    },
    "barber_onboarding": {
      "required": [
        "id",
        "user_id",
        "experience_years",
        "specializations",
        "bio",
        "ic_number",
        "ic_front_url",
        "ic_back_url",
        "selfie_url",
        "service_radius_km",
        "base_price",
        "availability",
        "bank_name",
        "bank_account_number",
        "bank_account_name"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "user_id": {
          "format": "uuid",
          "type": "string"
        },
        "experience_years": {
          "format": "integer",
          "type": "integer"
        },
        "specializations": {
          "format": "text[]",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "bio": {
          "format": "text",
          "type": "string"
        },
        "ic_number": {
          "format": "character varying",
          "maxLength": 12,
          "type": "string"
        },
        "ic_front_url": {
          "format": "text",
          "type": "string"
        },
        "ic_back_url": {
          "format": "text",
          "type": "string"
        },
        "selfie_url": {
          "format": "text",
          "type": "string"
        },
        "certificate_urls": {
          "format": "text[]",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "service_radius_km": {
          "format": "integer",
          "type": "integer"
        },
        "portfolio_urls": {
          "format": "text[]",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "base_price": {
          "format": "numeric",
          "type": "number"
        },
        "availability": {
          "format": "jsonb"
        },
        "bank_name": {
          "format": "text",
          "type": "string"
        },
        "bank_account_number": {
          "format": "text",
          "type": "string"
        },
        "bank_account_name": {
          "format": "text",
          "type": "string"
        },
        "status": {
          "default": "pending",
          "format": "character varying",
          "maxLength": 50,
          "type": "string"
        },
        "verification_notes": {
          "format": "text",
          "type": "string"
        },
        "reviewed_by": {
          "format": "uuid",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "submitted_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "approved_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "rejected_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "metadata": {
          "format": "jsonb"
        }
      },
      "type": "object"
    },
    "geometry_columns": {
      "properties": {
        "f_table_catalog": {
          "format": "character varying",
          "maxLength": 256,
          "type": "string"
        },
        "f_table_schema": {
          "format": "name",
          "type": "string"
        },
        "f_table_name": {
          "format": "name",
          "type": "string"
        },
        "f_geometry_column": {
          "format": "name",
          "type": "string"
        },
        "coord_dimension": {
          "format": "integer",
          "type": "integer"
        },
        "srid": {
          "format": "integer",
          "type": "integer"
        },
        "type": {
          "format": "character varying",
          "maxLength": 30,
          "type": "string"
        }
      },
      "type": "object"
    },
    "profiles": {
      "description": "User profiles extending Supabase auth",
      "required": [
        "id",
        "role",
        "full_name"
      ],
      "properties": {
        "id": {
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "role": {
          "default": "customer",
          "enum": [
            "customer",
            "barber",
            "barbershop_owner",
            "admin"
          ],
          "format": "public.user_role",
          "type": "string"
        },
        "full_name": {
          "format": "text",
          "type": "string"
        },
        "phone_number": {
          "format": "text",
          "type": "string"
        },
        "phone_verified": {
          "default": false,
          "description": "Whether the user has verified their phone number",
          "format": "boolean",
          "type": "boolean"
        },
        "avatar_url": {
          "format": "text",
          "type": "string"
        },
        "date_of_birth": {
          "format": "date",
          "type": "string"
        },
        "gender": {
          "format": "text",
          "type": "string"
        },
        "address_line1": {
          "format": "text",
          "type": "string"
        },
        "address_line2": {
          "format": "text",
          "type": "string"
        },
        "city": {
          "format": "text",
          "type": "string"
        },
        "state": {
          "format": "text",
          "type": "string"
        },
        "postal_code": {
          "format": "text",
          "type": "string"
        },
        "country": {
          "default": "Malaysia",
          "format": "text",
          "type": "string"
        },
        "location": {
          "format": "public.geography(Point,4326)",
          "type": "string"
        },
        "language": {
          "default": "en",
          "format": "text",
          "type": "string"
        },
        "currency": {
          "default": "MYR",
          "format": "text",
          "type": "string"
        },
        "timezone": {
          "default": "Asia/Kuala_Lumpur",
          "format": "text",
          "type": "string"
        },
        "is_active": {
          "default": true,
          "format": "boolean",
          "type": "boolean"
        },
        "is_online": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "last_seen_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "fcm_token": {
          "format": "text",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "email": {
          "format": "text",
          "type": "string"
        },
        "email_verified": {
          "default": false,
          "description": "Whether the user has verified their email address",
          "format": "boolean",
          "type": "boolean"
        },
        "email_verified_at": {
          "description": "Timestamp when email was verified",
          "format": "timestamp without time zone",
          "type": "string"
        },
        "phone_verified_at": {
          "default": "now()",
          "description": "Timestamp when phone was verified",
          "format": "timestamp without time zone",
          "type": "string"
        },
        "points_balance": {
          "default": 0,
          "description": "User loyalty points balance",
          "format": "integer",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "favorites": {
      "description": "User favorites (barbers/shops)",
      "required": [
        "id",
        "user_id"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "user_id": {
          "description": "Note:\nThis is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "barber_id": {
          "description": "Note:\nThis is a Foreign Key to `barbers.id`.<fk table='barbers' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "barbershop_id": {
          "description": "Note:\nThis is a Foreign Key to `barbershops.id`.<fk table='barbershops' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "services": {
      "description": "Services offered by barbers/shops",
      "required": [
        "id",
        "name",
        "price",
        "duration_minutes"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "barber_id": {
          "description": "Note:\nThis is a Foreign Key to `barbers.id`.<fk table='barbers' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "barbershop_id": {
          "description": "Note:\nThis is a Foreign Key to `barbershops.id`.<fk table='barbershops' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "name": {
          "format": "text",
          "type": "string"
        },
        "description": {
          "format": "text",
          "type": "string"
        },
        "category": {
          "format": "text",
          "type": "string"
        },
        "image_url": {
          "format": "text",
          "type": "string"
        },
        "price": {
          "format": "numeric",
          "type": "number"
        },
        "duration_minutes": {
          "format": "integer",
          "type": "integer"
        },
        "is_active": {
          "default": true,
          "format": "boolean",
          "type": "boolean"
        },
        "is_popular": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "bookings": {
      "description": "Customer bookings/appointments",
      "required": [
        "id",
        "customer_id",
        "booking_number",
        "services",
        "scheduled_date",
        "scheduled_time",
        "scheduled_datetime",
        "estimated_duration_minutes",
        "service_type",
        "subtotal",
        "total_price"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "customer_id": {
          "description": "Note:\nThis is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "barber_id": {
          "description": "Note:\nThis is a Foreign Key to `barbers.id`.<fk table='barbers' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "barbershop_id": {
          "description": "Note:\nThis is a Foreign Key to `barbershops.id`.<fk table='barbershops' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "booking_number": {
          "format": "text",
          "type": "string"
        },
        "status": {
          "default": "pending",
          "enum": [
            "pending",
            "accepted",
            "on_the_way",
            "arrived",
            "confirmed",
            "in_progress",
            "completed",
            "cancelled",
            "rejected",
            "no_show"
          ],
          "format": "public.booking_status",
          "type": "string"
        },
        "services": {
          "format": "jsonb"
        },
        "scheduled_date": {
          "format": "date",
          "type": "string"
        },
        "scheduled_time": {
          "format": "time without time zone",
          "type": "string"
        },
        "scheduled_datetime": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "estimated_duration_minutes": {
          "format": "integer",
          "type": "integer"
        },
        "service_type": {
          "format": "text",
          "type": "string"
        },
        "customer_address": {
          "format": "jsonb"
        },
        "subtotal": {
          "format": "numeric",
          "type": "number"
        },
        "service_fee": {
          "default": 0.0,
          "format": "numeric",
          "type": "number"
        },
        "travel_fee": {
          "default": 0.0,
          "format": "numeric",
          "type": "number"
        },
        "discount_amount": {
          "default": 0.0,
          "format": "numeric",
          "type": "number"
        },
        "total_price": {
          "format": "numeric",
          "type": "number"
        },
        "payment_method": {
          "enum": [
            "cash",
            "card",
            "fpx",
            "ewallet_tng",
            "ewallet_grab",
            "ewallet_boost",
            "ewallet_shopee"
          ],
          "format": "public.payment_method",
          "type": "string"
        },
        "payment_status": {
          "default": "pending",
          "enum": [
            "pending",
            "processing",
            "completed",
            "failed",
            "refunded",
            "cancelled"
          ],
          "format": "public.payment_status",
          "type": "string"
        },
        "paid_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "customer_notes": {
          "format": "text",
          "type": "string"
        },
        "barber_notes": {
          "format": "text",
          "type": "string"
        },
        "cancellation_reason": {
          "format": "text",
          "type": "string"
        },
        "accepted_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "started_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "completed_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "cancelled_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "rating": {
          "format": "numeric",
          "type": "number"
        },
        "customer_location": {
          "description": "Customer location where service will be performed (captured at booking time)",
          "format": "public.geometry(Point,4326)",
          "type": "string"
        },
        "customer_address_text": {
          "description": "Human-readable address text for customer location",
          "format": "text",
          "type": "string"
        },
        "customer_location_accuracy": {
          "format": "numeric",
          "type": "number"
        },
        "barber_location_at_accept": {
          "description": "Barber GPS location when they accepted the booking",
          "format": "public.geometry(Point,4326)",
          "type": "string"
        },
        "barber_location_at_start": {
          "description": "Barber GPS location when they started traveling to customer",
          "format": "public.geometry(Point,4326)",
          "type": "string"
        },
        "barber_location_at_complete": {
          "description": "Barber GPS location when service was completed",
          "format": "public.geometry(Point,4326)",
          "type": "string"
        },
        "distance_km": {
          "description": "Calculated distance between customer and barber at booking time (in kilometers)",
          "format": "numeric",
          "type": "number"
        },
        "estimated_travel_time_minutes": {
          "description": "Estimated travel time for barber to reach customer (in minutes)",
          "format": "integer",
          "type": "integer"
        },
        "tracking_started_at": {
          "description": "Timestamp when barber started traveling (status changed to accepted/confirmed)",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "tracking_last_updated_at": {
          "description": "Last time tracking data was updated",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "estimated_arrival_time": {
          "description": "Calculated ETA timestamp based on current location",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "current_distance_km": {
          "description": "Current distance between barber and customer in kilometers",
          "format": "numeric",
          "type": "number"
        },
        "current_eta_minutes": {
          "description": "Current estimated minutes until arrival",
          "format": "integer",
          "type": "integer"
        },
        "barber_arrived_at": {
          "description": "Timestamp when barber arrived at customer location",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "on_the_way_at": {
          "description": "Timestamp when barber started heading to customer location",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "arrived_at": {
          "description": "Timestamp when barber arrived at customer location",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "booking_vouchers": {
      "description": "Tracks voucher usage on bookings with historical discount data",
      "required": [
        "id",
        "booking_id",
        "user_voucher_id",
        "customer_id",
        "voucher_code",
        "voucher_title",
        "original_total",
        "discount_applied",
        "final_total"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "booking_id": {
          "description": "Note:\nThis is a Foreign Key to `bookings.id`.<fk table='bookings' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "user_voucher_id": {
          "description": "Note:\nThis is a Foreign Key to `user_vouchers.id`.<fk table='user_vouchers' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "customer_id": {
          "description": "Note:\nThis is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "voucher_code": {
          "format": "text",
          "type": "string"
        },
        "voucher_title": {
          "format": "text",
          "type": "string"
        },
        "discount_amount": {
          "format": "numeric",
          "type": "number"
        },
        "discount_percent": {
          "format": "integer",
          "type": "integer"
        },
        "original_total": {
          "format": "numeric",
          "type": "number"
        },
        "discount_applied": {
          "format": "numeric",
          "type": "number"
        },
        "final_total": {
          "format": "numeric",
          "type": "number"
        },
        "applied_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "active_tracking_sessions": {
      "description": "Shows all currently active tracking sessions with real-time data",
      "properties": {
        "booking_id": {
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "customer_id": {
          "description": "Note:\nThis is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "barber_id": {
          "description": "Note:\nThis is a Foreign Key to `barbers.id`.<fk table='barbers' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "status": {
          "enum": [
            "pending",
            "accepted",
            "on_the_way",
            "arrived",
            "confirmed",
            "in_progress",
            "completed",
            "cancelled",
            "rejected",
            "no_show"
          ],
          "format": "public.booking_status",
          "type": "string"
        },
        "tracking_started_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "tracking_last_updated_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "current_distance_km": {
          "format": "numeric",
          "type": "number"
        },
        "current_eta_minutes": {
          "format": "integer",
          "type": "integer"
        },
        "estimated_arrival_time": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "barber_location": {
          "format": "public.geography(Point,4326)",
          "type": "string"
        },
        "barber_profile_updated_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "minutes_since_last_update": {
          "format": "numeric",
          "type": "number"
        }
      },
      "type": "object"
    },
    "barbers": {
      "description": "Freelance barbers/stylists",
      "required": [
        "id",
        "user_id"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "user_id": {
          "description": "Note:\nThis is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "business_name": {
          "format": "text",
          "type": "string"
        },
        "bio": {
          "format": "text",
          "type": "string"
        },
        "experience_years": {
          "format": "integer",
          "type": "integer"
        },
        "specializations": {
          "format": "text[]",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "portfolio_images": {
          "format": "text[]",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "verification_status": {
          "default": "pending",
          "enum": [
            "unverified",
            "pending",
            "verified",
            "rejected"
          ],
          "format": "public.verification_status",
          "type": "string"
        },
        "verification_documents": {
          "format": "jsonb"
        },
        "ic_number": {
          "format": "text",
          "type": "string"
        },
        "ssm_number": {
          "format": "text",
          "type": "string"
        },
        "rating": {
          "default": 0.0,
          "format": "numeric",
          "type": "number"
        },
        "total_reviews": {
          "default": 0,
          "format": "integer",
          "type": "integer"
        },
        "total_bookings": {
          "default": 0,
          "format": "integer",
          "type": "integer"
        },
        "completed_bookings": {
          "default": 0,
          "format": "integer",
          "type": "integer"
        },
        "is_available": {
          "default": true,
          "format": "boolean",
          "type": "boolean"
        },
        "working_hours": {
          "format": "jsonb"
        },
        "service_radius_km": {
          "default": 10,
          "description": "Maximum distance (km) barber will travel to serve customers",
          "format": "integer",
          "type": "integer"
        },
        "base_price": {
          "format": "numeric",
          "type": "number"
        },
        "travel_fee_per_km": {
          "format": "numeric",
          "type": "number"
        },
        "bank_name": {
          "format": "text",
          "type": "string"
        },
        "bank_account_number": {
          "format": "text",
          "type": "string"
        },
        "bank_account_name": {
          "format": "text",
          "type": "string"
        },
        "is_featured": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "is_verified": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "stripe_account_id": {
          "format": "text",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "last_radius_change_at": {
          "description": "Timestamp of last radius change (for 24-hour cooldown enforcement)",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "geography_columns": {
      "properties": {
        "f_table_catalog": {
          "format": "name",
          "type": "string"
        },
        "f_table_schema": {
          "format": "name",
          "type": "string"
        },
        "f_table_name": {
          "format": "name",
          "type": "string"
        },
        "f_geography_column": {
          "format": "name",
          "type": "string"
        },
        "coord_dimension": {
          "format": "integer",
          "type": "integer"
        },
        "srid": {
          "format": "integer",
          "type": "integer"
        },
        "type": {
          "format": "text",
          "type": "string"
        }
      },
      "type": "object"
    },
    "user_vouchers": {
      "description": "User-redeemed vouchers from rewards program",
      "required": [
        "id",
        "user_id",
        "voucher_id",
        "points_spent",
        "status"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "user_id": {
          "description": "Note:\nThis is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "voucher_id": {
          "description": "Note:\nThis is a Foreign Key to `vouchers.id`.<fk table='vouchers' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "redeemed_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "points_spent": {
          "format": "integer",
          "type": "integer"
        },
        "status": {
          "default": "active",
          "description": "active: can use, used: already applied, expired: past validity",
          "format": "text",
          "type": "string"
        },
        "used_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "used_for_booking_id": {
          "description": "Note:\nThis is a Foreign Key to `bookings.id`.<fk table='bookings' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "credit_transactions": {
      "description": "Transaction log for all credit additions and deductions",
      "required": [
        "id",
        "user_id",
        "type",
        "source",
        "amount",
        "balance_after",
        "description"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "user_id": {
          "description": "Note:\nThis is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "type": {
          "format": "text",
          "type": "string"
        },
        "source": {
          "format": "text",
          "type": "string"
        },
        "amount": {
          "format": "numeric",
          "type": "number"
        },
        "balance_after": {
          "format": "numeric",
          "type": "number"
        },
        "description": {
          "format": "text",
          "type": "string"
        },
        "booking_id": {
          "description": "Note:\nThis is a Foreign Key to `bookings.id`.<fk table='bookings' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "metadata": {
          "format": "jsonb"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "points_transactions": {
      "description": "Complete history of all points transactions",
      "required": [
        "id",
        "user_id",
        "type",
        "amount",
        "balance_after",
        "description"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "user_id": {
          "description": "Note:\nThis is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "type": {
          "description": "Transaction type: earn from booking, redeem for voucher, refund, or admin adjustment",
          "format": "text",
          "type": "string"
        },
        "amount": {
          "description": "Points change: positive for earn/refund, negative for redeem",
          "format": "integer",
          "type": "integer"
        },
        "balance_after": {
          "format": "integer",
          "type": "integer"
        },
        "description": {
          "format": "text",
          "type": "string"
        },
        "booking_id": {
          "description": "Note:\nThis is a Foreign Key to `bookings.id`.<fk table='bookings' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "voucher_id": {
          "description": "Note:\nThis is a Foreign Key to `vouchers.id`.<fk table='vouchers' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "user_voucher_id": {
          "description": "Note:\nThis is a Foreign Key to `user_vouchers.id`.<fk table='user_vouchers' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "admin_id": {
          "description": "Note:\nThis is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "admin_notes": {
          "format": "text",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "messages": {
      "description": "In-app chat messages",
      "required": [
        "id",
        "sender_id",
        "receiver_id",
        "content"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "sender_id": {
          "description": "Note:\nThis is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "receiver_id": {
          "description": "Note:\nThis is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "booking_id": {
          "description": "Note:\nThis is a Foreign Key to `bookings.id`.<fk table='bookings' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "message_type": {
          "default": "text",
          "format": "text",
          "type": "string"
        },
        "content": {
          "format": "text",
          "type": "string"
        },
        "image_url": {
          "format": "text",
          "type": "string"
        },
        "location_data": {
          "format": "jsonb"
        },
        "is_read": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "read_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "vouchers": {
      "description": "Platform-created vouchers for rewards program",
      "required": [
        "id",
        "code",
        "title",
        "type",
        "value",
        "points_cost",
        "valid_until"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "code": {
          "description": "Unique voucher code (e.g., SAVE5)",
          "format": "character varying",
          "maxLength": 20,
          "type": "string"
        },
        "title": {
          "format": "text",
          "type": "string"
        },
        "description": {
          "format": "text",
          "type": "string"
        },
        "type": {
          "description": "Discount type: percentage or fixed amount",
          "format": "text",
          "type": "string"
        },
        "value": {
          "description": "Discount value (percentage number or fixed RM amount)",
          "format": "numeric",
          "type": "number"
        },
        "points_cost": {
          "description": "Points required to redeem this voucher",
          "format": "integer",
          "type": "integer"
        },
        "max_redemptions": {
          "format": "integer",
          "type": "integer"
        },
        "current_redemptions": {
          "default": 0,
          "format": "integer",
          "type": "integer"
        },
        "max_per_user": {
          "default": 1,
          "format": "integer",
          "type": "integer"
        },
        "min_spend": {
          "default": 0,
          "format": "numeric",
          "type": "number"
        },
        "max_discount": {
          "format": "numeric",
          "type": "number"
        },
        "applicable_services": {
          "format": "text[]",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "valid_from": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "valid_until": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "created_by": {
          "description": "Note:\nThis is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "is_active": {
          "default": true,
          "format": "boolean",
          "type": "boolean"
        },
        "is_featured": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "customer_addresses": {
      "required": [
        "id",
        "user_id",
        "label",
        "address_line1",
        "city",
        "state"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "user_id": {
          "description": "Note:\nThis is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "label": {
          "format": "text",
          "type": "string"
        },
        "address_line1": {
          "format": "text",
          "type": "string"
        },
        "address_line2": {
          "format": "text",
          "type": "string"
        },
        "city": {
          "format": "text",
          "type": "string"
        },
        "state": {
          "format": "text",
          "type": "string"
        },
        "postal_code": {
          "format": "text",
          "type": "string"
        },
        "country": {
          "default": "Malaysia",
          "format": "text",
          "type": "string"
        },
        "is_default": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "building_name": {
          "format": "text",
          "type": "string"
        },
        "floor": {
          "format": "text",
          "type": "string"
        },
        "unit_number": {
          "format": "text",
          "type": "string"
        },
        "delivery_instructions": {
          "format": "text",
          "type": "string"
        },
        "contact_number": {
          "format": "text",
          "type": "string"
        },
        "address_type": {
          "default": "other",
          "format": "text",
          "type": "string"
        },
        "landmark": {
          "format": "text",
          "type": "string"
        },
        "gps_accuracy": {
          "format": "numeric",
          "type": "number"
        },
        "last_used_at": {
          "format": "timestamp without time zone",
          "type": "string"
        },
        "location": {
          "description": "PostGIS Point geometry (SRID 4326) representing the address location. Use ST_X() for longitude, ST_Y() for latitude.",
          "format": "public.geometry(Point,4326)",
          "type": "string"
        },
        "latitude": {
          "description": "Computed latitude from location geometry (read-only, for backward compatibility)",
          "format": "text",
          "type": "string"
        },
        "longitude": {
          "description": "Computed longitude from location geometry (read-only, for backward compatibility)",
          "format": "text",
          "type": "string"
        },
        "location_updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "customer_credits": {
      "description": "Customer credit balances for instant refunds and promotions",
      "required": [
        "id",
        "user_id",
        "balance"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "user_id": {
          "description": "Note:\nThis is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "balance": {
          "default": 0.0,
          "format": "numeric",
          "type": "number"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "route_cache": {
      "description": "Caches Mapbox Directions API results to reduce API calls. \nRoutes expire after 7 days by default to account for traffic pattern changes.\nCoordinates are rounded to 3 decimals (~100m) for better cache hit rate.",
      "required": [
        "id",
        "origin_lat",
        "origin_lng",
        "destination_lat",
        "destination_lng",
        "distance_km",
        "duration_minutes"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "origin_lat": {
          "format": "numeric",
          "type": "number"
        },
        "origin_lng": {
          "format": "numeric",
          "type": "number"
        },
        "destination_lat": {
          "format": "numeric",
          "type": "number"
        },
        "destination_lng": {
          "format": "numeric",
          "type": "number"
        },
        "distance_km": {
          "format": "numeric",
          "type": "number"
        },
        "duration_minutes": {
          "format": "numeric",
          "type": "number"
        },
        "profile": {
          "default": "driving",
          "format": "character varying",
          "maxLength": 20,
          "type": "string"
        },
        "traffic_profile": {
          "default": "normal",
          "format": "character varying",
          "maxLength": 20,
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "last_used_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "hit_count": {
          "default": 1,
          "format": "integer",
          "type": "integer"
        },
        "expires_at": {
          "default": "(now() + '7 days'::interval)",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "reviews": {
      "description": "Customer reviews and ratings",
      "required": [
        "id",
        "booking_id",
        "customer_id",
        "rating"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "booking_id": {
          "description": "Note:\nThis is a Foreign Key to `bookings.id`.<fk table='bookings' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "customer_id": {
          "description": "Note:\nThis is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "barber_id": {
          "description": "Note:\nThis is a Foreign Key to `barbers.id`.<fk table='barbers' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "barbershop_id": {
          "description": "Note:\nThis is a Foreign Key to `barbershops.id`.<fk table='barbershops' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "rating": {
          "format": "integer",
          "type": "integer"
        },
        "comment": {
          "format": "text",
          "type": "string"
        },
        "images": {
          "format": "text[]",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "response": {
          "format": "text",
          "type": "string"
        },
        "response_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "is_verified": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "is_flagged": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "is_visible": {
          "default": true,
          "format": "boolean",
          "type": "boolean"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "onboarding_verification_logs": {
      "required": [
        "id",
        "application_id",
        "application_type",
        "action"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "application_id": {
          "format": "uuid",
          "type": "string"
        },
        "application_type": {
          "format": "character varying",
          "maxLength": 20,
          "type": "string"
        },
        "action": {
          "format": "character varying",
          "maxLength": 50,
          "type": "string"
        },
        "status": {
          "format": "character varying",
          "maxLength": 50,
          "type": "string"
        },
        "notes": {
          "format": "text",
          "type": "string"
        },
        "reviewer_id": {
          "format": "uuid",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "metadata": {
          "format": "jsonb"
        }
      },
      "type": "object"
    },
    "notifications": {
      "description": "Push and in-app notifications",
      "required": [
        "id",
        "user_id",
        "type",
        "title",
        "body"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "user_id": {
          "description": "Note:\nThis is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "type": {
          "enum": [
            "booking",
            "payment",
            "review",
            "promotion",
            "system",
            "chat"
          ],
          "format": "public.notification_type",
          "type": "string"
        },
        "title": {
          "format": "text",
          "type": "string"
        },
        "body": {
          "format": "text",
          "type": "string"
        },
        "image_url": {
          "format": "text",
          "type": "string"
        },
        "action_url": {
          "format": "text",
          "type": "string"
        },
        "action_data": {
          "format": "jsonb"
        },
        "is_read": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "read_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "is_sent": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "sent_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "user_booking_stats": {
      "properties": {
        "user_id": {
          "description": "Note:\nThis is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "total_bookings": {
          "format": "bigint",
          "type": "integer"
        },
        "completed_bookings": {
          "format": "bigint",
          "type": "integer"
        },
        "cancelled_bookings": {
          "format": "bigint",
          "type": "integer"
        },
        "avg_rating": {
          "format": "numeric",
          "type": "number"
        }
      },
      "type": "object"
    },
    "promo_codes": {
      "description": "Promotional discount codes",
      "required": [
        "id",
        "code",
        "discount_type",
        "discount_value"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "code": {
          "format": "text",
          "type": "string"
        },
        "description": {
          "format": "text",
          "type": "string"
        },
        "discount_type": {
          "format": "text",
          "type": "string"
        },
        "discount_value": {
          "format": "numeric",
          "type": "number"
        },
        "max_discount_amount": {
          "format": "numeric",
          "type": "number"
        },
        "usage_limit": {
          "format": "integer",
          "type": "integer"
        },
        "usage_count": {
          "default": 0,
          "format": "integer",
          "type": "integer"
        },
        "per_user_limit": {
          "default": 1,
          "format": "integer",
          "type": "integer"
        },
        "min_order_amount": {
          "format": "numeric",
          "type": "number"
        },
        "is_active": {
          "default": true,
          "format": "boolean",
          "type": "boolean"
        },
        "valid_from": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "valid_until": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "applicable_to": {
          "format": "text",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "parameters": {
    "preferParams": {
      "name": "Prefer",
      "description": "Preference",
      "required": false,
      "enum": [],
      "in": "header",
      "type": "string"
    },
    "preferReturn": {
      "name": "Prefer",
      "description": "Preference",
      "required": false,
      "enum": [
        "return=representation",
        "return=minimal",
        "return=none"
      ],
      "in": "header",
      "type": "string"
    },
    "preferCount": {
      "name": "Prefer",
      "description": "Preference",
      "required": false,
      "enum": [
        "count=none"
      ],
      "in": "header",
      "type": "string"
    },
    "preferPost": {
      "name": "Prefer",
      "description": "Preference",
      "required": false,
      "enum": [
        "return=representation",
        "return=minimal",
        "return=none",
        "resolution=ignore-duplicates",
        "resolution=merge-duplicates"
      ],
      "in": "header",
      "type": "string"
    },
    "select": {
      "name": "select",
      "description": "Filtering Columns",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "on_conflict": {
      "name": "on_conflict",
      "description": "On Conflict",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "order": {
      "name": "order",
      "description": "Ordering",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "range": {
      "name": "Range",
      "description": "Limiting and Pagination",
      "required": false,
      "in": "header",
      "type": "string"
    },
    "rangeUnit": {
      "name": "Range-Unit",
      "description": "Limiting and Pagination",
      "required": false,
      "default": "items",
      "in": "header",
      "type": "string"
    },
    "offset": {
      "name": "offset",
      "description": "Limiting and Pagination",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "limit": {
      "name": "limit",
      "description": "Limiting and Pagination",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.barbershops": {
      "name": "barbershops",
      "description": "barbershops",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/barbershops"
      }
    },
    "rowFilter.barbershops.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershops.owner_id": {
      "name": "owner_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershops.name": {
      "name": "name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershops.description": {
      "name": "description",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershops.logo_url": {
      "name": "logo_url",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershops.cover_images": {
      "name": "cover_images",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershops.phone_number": {
      "name": "phone_number",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershops.email": {
      "name": "email",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershops.website_url": {
      "name": "website_url",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershops.address_line1": {
      "name": "address_line1",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershops.address_line2": {
      "name": "address_line2",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershops.city": {
      "name": "city",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershops.state": {
      "name": "state",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershops.postal_code": {
      "name": "postal_code",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershops.country": {
      "name": "country",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershops.location": {
      "name": "location",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershops.opening_hours": {
      "name": "opening_hours",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershops.is_open_now": {
      "name": "is_open_now",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershops.verification_status": {
      "name": "verification_status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershops.ssm_number": {
      "name": "ssm_number",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershops.rating": {
      "name": "rating",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershops.total_reviews": {
      "name": "total_reviews",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershops.total_bookings": {
      "name": "total_bookings",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershops.amenities": {
      "name": "amenities",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershops.payment_methods": {
      "name": "payment_methods",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershops.is_active": {
      "name": "is_active",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershops.is_featured": {
      "name": "is_featured",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershops.is_verified": {
      "name": "is_verified",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershops.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershops.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.payments": {
      "name": "payments",
      "description": "payments",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/payments"
      }
    },
    "rowFilter.payments.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.payments.booking_id": {
      "name": "booking_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.payments.customer_id": {
      "name": "customer_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.payments.amount": {
      "name": "amount",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.payments.currency": {
      "name": "currency",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.payments.payment_method": {
      "name": "payment_method",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.payments.payment_status": {
      "name": "payment_status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.payments.stripe_payment_id": {
      "name": "stripe_payment_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.payments.stripe_payment_intent_id": {
      "name": "stripe_payment_intent_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.payments.billplz_bill_id": {
      "name": "billplz_bill_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.payments.receipt_url": {
      "name": "receipt_url",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.payments.refund_amount": {
      "name": "refund_amount",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.payments.refunded_at": {
      "name": "refunded_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.payments.refund_reason": {
      "name": "refund_reason",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.payments.metadata": {
      "name": "metadata",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.payments.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.payments.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.spatial_ref_sys": {
      "name": "spatial_ref_sys",
      "description": "spatial_ref_sys",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/spatial_ref_sys"
      }
    },
    "rowFilter.spatial_ref_sys.srid": {
      "name": "srid",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.spatial_ref_sys.auth_name": {
      "name": "auth_name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.spatial_ref_sys.auth_srid": {
      "name": "auth_srid",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.spatial_ref_sys.srtext": {
      "name": "srtext",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.spatial_ref_sys.proj4text": {
      "name": "proj4text",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.payouts": {
      "name": "payouts",
      "description": "payouts",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/payouts"
      }
    },
    "rowFilter.payouts.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.payouts.barber_id": {
      "name": "barber_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.payouts.barbershop_id": {
      "name": "barbershop_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.payouts.amount": {
      "name": "amount",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.payouts.currency": {
      "name": "currency",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.payouts.status": {
      "name": "status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.payouts.bank_name": {
      "name": "bank_name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.payouts.bank_account_number": {
      "name": "bank_account_number",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.payouts.bank_account_name": {
      "name": "bank_account_name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.payouts.stripe_payout_id": {
      "name": "stripe_payout_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.payouts.stripe_transfer_id": {
      "name": "stripe_transfer_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.payouts.period_start": {
      "name": "period_start",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.payouts.period_end": {
      "name": "period_end",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.payouts.bookings_count": {
      "name": "bookings_count",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.payouts.total_earnings": {
      "name": "total_earnings",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.payouts.platform_fee": {
      "name": "platform_fee",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.payouts.paid_at": {
      "name": "paid_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.payouts.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.payouts.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.otp_requests": {
      "name": "otp_requests",
      "description": "otp_requests",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/otp_requests"
      }
    },
    "rowFilter.otp_requests.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.otp_requests.phone_number": {
      "name": "phone_number",
      "description": "Phone number that received the OTP",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.otp_requests.message_sid": {
      "name": "message_sid",
      "description": "Twilio message SID for tracking",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.otp_requests.status": {
      "name": "status",
      "description": "Twilio message status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.otp_requests.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.barbershop_onboarding": {
      "name": "barbershop_onboarding",
      "description": "barbershop_onboarding",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/barbershop_onboarding"
      }
    },
    "rowFilter.barbershop_onboarding.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershop_onboarding.user_id": {
      "name": "user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershop_onboarding.name": {
      "name": "name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershop_onboarding.description": {
      "name": "description",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershop_onboarding.phone": {
      "name": "phone",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershop_onboarding.email": {
      "name": "email",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershop_onboarding.address": {
      "name": "address",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershop_onboarding.city": {
      "name": "city",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershop_onboarding.state": {
      "name": "state",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershop_onboarding.postcode": {
      "name": "postcode",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershop_onboarding.latitude": {
      "name": "latitude",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershop_onboarding.longitude": {
      "name": "longitude",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershop_onboarding.logo_url": {
      "name": "logo_url",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershop_onboarding.cover_urls": {
      "name": "cover_urls",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershop_onboarding.ssm_url": {
      "name": "ssm_url",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershop_onboarding.license_url": {
      "name": "license_url",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershop_onboarding.operating_hours": {
      "name": "operating_hours",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershop_onboarding.staff": {
      "name": "staff",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershop_onboarding.services": {
      "name": "services",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershop_onboarding.amenities": {
      "name": "amenities",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershop_onboarding.bank_name": {
      "name": "bank_name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershop_onboarding.bank_account_number": {
      "name": "bank_account_number",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershop_onboarding.bank_account_name": {
      "name": "bank_account_name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershop_onboarding.status": {
      "name": "status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershop_onboarding.verification_notes": {
      "name": "verification_notes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershop_onboarding.reviewed_by": {
      "name": "reviewed_by",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershop_onboarding.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershop_onboarding.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershop_onboarding.submitted_at": {
      "name": "submitted_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershop_onboarding.approved_at": {
      "name": "approved_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershop_onboarding.rejected_at": {
      "name": "rejected_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbershop_onboarding.metadata": {
      "name": "metadata",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.barber_onboarding": {
      "name": "barber_onboarding",
      "description": "barber_onboarding",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/barber_onboarding"
      }
    },
    "rowFilter.barber_onboarding.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barber_onboarding.user_id": {
      "name": "user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barber_onboarding.experience_years": {
      "name": "experience_years",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barber_onboarding.specializations": {
      "name": "specializations",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barber_onboarding.bio": {
      "name": "bio",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barber_onboarding.ic_number": {
      "name": "ic_number",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barber_onboarding.ic_front_url": {
      "name": "ic_front_url",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barber_onboarding.ic_back_url": {
      "name": "ic_back_url",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barber_onboarding.selfie_url": {
      "name": "selfie_url",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barber_onboarding.certificate_urls": {
      "name": "certificate_urls",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barber_onboarding.service_radius_km": {
      "name": "service_radius_km",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barber_onboarding.portfolio_urls": {
      "name": "portfolio_urls",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barber_onboarding.base_price": {
      "name": "base_price",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barber_onboarding.availability": {
      "name": "availability",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barber_onboarding.bank_name": {
      "name": "bank_name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barber_onboarding.bank_account_number": {
      "name": "bank_account_number",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barber_onboarding.bank_account_name": {
      "name": "bank_account_name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barber_onboarding.status": {
      "name": "status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barber_onboarding.verification_notes": {
      "name": "verification_notes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barber_onboarding.reviewed_by": {
      "name": "reviewed_by",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barber_onboarding.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barber_onboarding.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barber_onboarding.submitted_at": {
      "name": "submitted_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barber_onboarding.approved_at": {
      "name": "approved_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barber_onboarding.rejected_at": {
      "name": "rejected_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barber_onboarding.metadata": {
      "name": "metadata",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.geometry_columns": {
      "name": "geometry_columns",
      "description": "geometry_columns",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/geometry_columns"
      }
    },
    "rowFilter.geometry_columns.f_table_catalog": {
      "name": "f_table_catalog",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geometry_columns.f_table_schema": {
      "name": "f_table_schema",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geometry_columns.f_table_name": {
      "name": "f_table_name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geometry_columns.f_geometry_column": {
      "name": "f_geometry_column",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geometry_columns.coord_dimension": {
      "name": "coord_dimension",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geometry_columns.srid": {
      "name": "srid",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geometry_columns.type": {
      "name": "type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.profiles": {
      "name": "profiles",
      "description": "profiles",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/profiles"
      }
    },
    "rowFilter.profiles.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.profiles.role": {
      "name": "role",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.profiles.full_name": {
      "name": "full_name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.profiles.phone_number": {
      "name": "phone_number",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.profiles.phone_verified": {
      "name": "phone_verified",
      "description": "Whether the user has verified their phone number",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.profiles.avatar_url": {
      "name": "avatar_url",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.profiles.date_of_birth": {
      "name": "date_of_birth",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.profiles.gender": {
      "name": "gender",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.profiles.address_line1": {
      "name": "address_line1",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.profiles.address_line2": {
      "name": "address_line2",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.profiles.city": {
      "name": "city",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.profiles.state": {
      "name": "state",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.profiles.postal_code": {
      "name": "postal_code",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.profiles.country": {
      "name": "country",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.profiles.location": {
      "name": "location",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.profiles.language": {
      "name": "language",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.profiles.currency": {
      "name": "currency",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.profiles.timezone": {
      "name": "timezone",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.profiles.is_active": {
      "name": "is_active",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.profiles.is_online": {
      "name": "is_online",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.profiles.last_seen_at": {
      "name": "last_seen_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.profiles.fcm_token": {
      "name": "fcm_token",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.profiles.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.profiles.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.profiles.email": {
      "name": "email",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.profiles.email_verified": {
      "name": "email_verified",
      "description": "Whether the user has verified their email address",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.profiles.email_verified_at": {
      "name": "email_verified_at",
      "description": "Timestamp when email was verified",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.profiles.phone_verified_at": {
      "name": "phone_verified_at",
      "description": "Timestamp when phone was verified",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.profiles.points_balance": {
      "name": "points_balance",
      "description": "User loyalty points balance",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.favorites": {
      "name": "favorites",
      "description": "favorites",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/favorites"
      }
    },
    "rowFilter.favorites.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.favorites.user_id": {
      "name": "user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.favorites.barber_id": {
      "name": "barber_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.favorites.barbershop_id": {
      "name": "barbershop_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.favorites.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.services": {
      "name": "services",
      "description": "services",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/services"
      }
    },
    "rowFilter.services.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.services.barber_id": {
      "name": "barber_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.services.barbershop_id": {
      "name": "barbershop_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.services.name": {
      "name": "name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.services.description": {
      "name": "description",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.services.category": {
      "name": "category",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.services.image_url": {
      "name": "image_url",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.services.price": {
      "name": "price",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.services.duration_minutes": {
      "name": "duration_minutes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.services.is_active": {
      "name": "is_active",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.services.is_popular": {
      "name": "is_popular",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.services.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.services.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.bookings": {
      "name": "bookings",
      "description": "bookings",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/bookings"
      }
    },
    "rowFilter.bookings.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.customer_id": {
      "name": "customer_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.barber_id": {
      "name": "barber_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.barbershop_id": {
      "name": "barbershop_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.booking_number": {
      "name": "booking_number",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.status": {
      "name": "status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.services": {
      "name": "services",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.scheduled_date": {
      "name": "scheduled_date",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.scheduled_time": {
      "name": "scheduled_time",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.scheduled_datetime": {
      "name": "scheduled_datetime",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.estimated_duration_minutes": {
      "name": "estimated_duration_minutes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.service_type": {
      "name": "service_type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.customer_address": {
      "name": "customer_address",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.subtotal": {
      "name": "subtotal",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.service_fee": {
      "name": "service_fee",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.travel_fee": {
      "name": "travel_fee",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.discount_amount": {
      "name": "discount_amount",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.total_price": {
      "name": "total_price",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.payment_method": {
      "name": "payment_method",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.payment_status": {
      "name": "payment_status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.paid_at": {
      "name": "paid_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.customer_notes": {
      "name": "customer_notes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.barber_notes": {
      "name": "barber_notes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.cancellation_reason": {
      "name": "cancellation_reason",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.accepted_at": {
      "name": "accepted_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.started_at": {
      "name": "started_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.completed_at": {
      "name": "completed_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.cancelled_at": {
      "name": "cancelled_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.rating": {
      "name": "rating",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.customer_location": {
      "name": "customer_location",
      "description": "Customer location where service will be performed (captured at booking time)",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.customer_address_text": {
      "name": "customer_address_text",
      "description": "Human-readable address text for customer location",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.customer_location_accuracy": {
      "name": "customer_location_accuracy",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.barber_location_at_accept": {
      "name": "barber_location_at_accept",
      "description": "Barber GPS location when they accepted the booking",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.barber_location_at_start": {
      "name": "barber_location_at_start",
      "description": "Barber GPS location when they started traveling to customer",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.barber_location_at_complete": {
      "name": "barber_location_at_complete",
      "description": "Barber GPS location when service was completed",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.distance_km": {
      "name": "distance_km",
      "description": "Calculated distance between customer and barber at booking time (in kilometers)",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.estimated_travel_time_minutes": {
      "name": "estimated_travel_time_minutes",
      "description": "Estimated travel time for barber to reach customer (in minutes)",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.tracking_started_at": {
      "name": "tracking_started_at",
      "description": "Timestamp when barber started traveling (status changed to accepted/confirmed)",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.tracking_last_updated_at": {
      "name": "tracking_last_updated_at",
      "description": "Last time tracking data was updated",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.estimated_arrival_time": {
      "name": "estimated_arrival_time",
      "description": "Calculated ETA timestamp based on current location",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.current_distance_km": {
      "name": "current_distance_km",
      "description": "Current distance between barber and customer in kilometers",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.current_eta_minutes": {
      "name": "current_eta_minutes",
      "description": "Current estimated minutes until arrival",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.barber_arrived_at": {
      "name": "barber_arrived_at",
      "description": "Timestamp when barber arrived at customer location",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.on_the_way_at": {
      "name": "on_the_way_at",
      "description": "Timestamp when barber started heading to customer location",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.bookings.arrived_at": {
      "name": "arrived_at",
      "description": "Timestamp when barber arrived at customer location",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.booking_vouchers": {
      "name": "booking_vouchers",
      "description": "booking_vouchers",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/booking_vouchers"
      }
    },
    "rowFilter.booking_vouchers.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.booking_vouchers.booking_id": {
      "name": "booking_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.booking_vouchers.user_voucher_id": {
      "name": "user_voucher_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.booking_vouchers.customer_id": {
      "name": "customer_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.booking_vouchers.voucher_code": {
      "name": "voucher_code",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.booking_vouchers.voucher_title": {
      "name": "voucher_title",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.booking_vouchers.discount_amount": {
      "name": "discount_amount",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.booking_vouchers.discount_percent": {
      "name": "discount_percent",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.booking_vouchers.original_total": {
      "name": "original_total",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.booking_vouchers.discount_applied": {
      "name": "discount_applied",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.booking_vouchers.final_total": {
      "name": "final_total",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.booking_vouchers.applied_at": {
      "name": "applied_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.active_tracking_sessions": {
      "name": "active_tracking_sessions",
      "description": "active_tracking_sessions",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/active_tracking_sessions"
      }
    },
    "rowFilter.active_tracking_sessions.booking_id": {
      "name": "booking_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_tracking_sessions.customer_id": {
      "name": "customer_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_tracking_sessions.barber_id": {
      "name": "barber_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_tracking_sessions.status": {
      "name": "status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_tracking_sessions.tracking_started_at": {
      "name": "tracking_started_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_tracking_sessions.tracking_last_updated_at": {
      "name": "tracking_last_updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_tracking_sessions.current_distance_km": {
      "name": "current_distance_km",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_tracking_sessions.current_eta_minutes": {
      "name": "current_eta_minutes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_tracking_sessions.estimated_arrival_time": {
      "name": "estimated_arrival_time",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_tracking_sessions.barber_location": {
      "name": "barber_location",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_tracking_sessions.barber_profile_updated_at": {
      "name": "barber_profile_updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_tracking_sessions.minutes_since_last_update": {
      "name": "minutes_since_last_update",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.barbers": {
      "name": "barbers",
      "description": "barbers",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/barbers"
      }
    },
    "rowFilter.barbers.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbers.user_id": {
      "name": "user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbers.business_name": {
      "name": "business_name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbers.bio": {
      "name": "bio",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbers.experience_years": {
      "name": "experience_years",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbers.specializations": {
      "name": "specializations",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbers.portfolio_images": {
      "name": "portfolio_images",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbers.verification_status": {
      "name": "verification_status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbers.verification_documents": {
      "name": "verification_documents",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbers.ic_number": {
      "name": "ic_number",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbers.ssm_number": {
      "name": "ssm_number",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbers.rating": {
      "name": "rating",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbers.total_reviews": {
      "name": "total_reviews",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbers.total_bookings": {
      "name": "total_bookings",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbers.completed_bookings": {
      "name": "completed_bookings",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbers.is_available": {
      "name": "is_available",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbers.working_hours": {
      "name": "working_hours",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbers.service_radius_km": {
      "name": "service_radius_km",
      "description": "Maximum distance (km) barber will travel to serve customers",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbers.base_price": {
      "name": "base_price",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbers.travel_fee_per_km": {
      "name": "travel_fee_per_km",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbers.bank_name": {
      "name": "bank_name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbers.bank_account_number": {
      "name": "bank_account_number",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbers.bank_account_name": {
      "name": "bank_account_name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbers.is_featured": {
      "name": "is_featured",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbers.is_verified": {
      "name": "is_verified",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbers.stripe_account_id": {
      "name": "stripe_account_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbers.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbers.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.barbers.last_radius_change_at": {
      "name": "last_radius_change_at",
      "description": "Timestamp of last radius change (for 24-hour cooldown enforcement)",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.geography_columns": {
      "name": "geography_columns",
      "description": "geography_columns",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/geography_columns"
      }
    },
    "rowFilter.geography_columns.f_table_catalog": {
      "name": "f_table_catalog",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geography_columns.f_table_schema": {
      "name": "f_table_schema",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geography_columns.f_table_name": {
      "name": "f_table_name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geography_columns.f_geography_column": {
      "name": "f_geography_column",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geography_columns.coord_dimension": {
      "name": "coord_dimension",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geography_columns.srid": {
      "name": "srid",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geography_columns.type": {
      "name": "type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.user_vouchers": {
      "name": "user_vouchers",
      "description": "user_vouchers",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/user_vouchers"
      }
    },
    "rowFilter.user_vouchers.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_vouchers.user_id": {
      "name": "user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_vouchers.voucher_id": {
      "name": "voucher_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_vouchers.redeemed_at": {
      "name": "redeemed_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_vouchers.points_spent": {
      "name": "points_spent",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_vouchers.status": {
      "name": "status",
      "description": "active: can use, used: already applied, expired: past validity",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_vouchers.used_at": {
      "name": "used_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_vouchers.used_for_booking_id": {
      "name": "used_for_booking_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_vouchers.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_vouchers.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.credit_transactions": {
      "name": "credit_transactions",
      "description": "credit_transactions",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/credit_transactions"
      }
    },
    "rowFilter.credit_transactions.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.credit_transactions.user_id": {
      "name": "user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.credit_transactions.type": {
      "name": "type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.credit_transactions.source": {
      "name": "source",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.credit_transactions.amount": {
      "name": "amount",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.credit_transactions.balance_after": {
      "name": "balance_after",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.credit_transactions.description": {
      "name": "description",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.credit_transactions.booking_id": {
      "name": "booking_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.credit_transactions.metadata": {
      "name": "metadata",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.credit_transactions.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.points_transactions": {
      "name": "points_transactions",
      "description": "points_transactions",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/points_transactions"
      }
    },
    "rowFilter.points_transactions.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.points_transactions.user_id": {
      "name": "user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.points_transactions.type": {
      "name": "type",
      "description": "Transaction type: earn from booking, redeem for voucher, refund, or admin adjustment",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.points_transactions.amount": {
      "name": "amount",
      "description": "Points change: positive for earn/refund, negative for redeem",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.points_transactions.balance_after": {
      "name": "balance_after",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.points_transactions.description": {
      "name": "description",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.points_transactions.booking_id": {
      "name": "booking_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.points_transactions.voucher_id": {
      "name": "voucher_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.points_transactions.user_voucher_id": {
      "name": "user_voucher_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.points_transactions.admin_id": {
      "name": "admin_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.points_transactions.admin_notes": {
      "name": "admin_notes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.points_transactions.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.messages": {
      "name": "messages",
      "description": "messages",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/messages"
      }
    },
    "rowFilter.messages.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.messages.sender_id": {
      "name": "sender_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.messages.receiver_id": {
      "name": "receiver_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.messages.booking_id": {
      "name": "booking_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.messages.message_type": {
      "name": "message_type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.messages.content": {
      "name": "content",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.messages.image_url": {
      "name": "image_url",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.messages.location_data": {
      "name": "location_data",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.messages.is_read": {
      "name": "is_read",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.messages.read_at": {
      "name": "read_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.messages.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.vouchers": {
      "name": "vouchers",
      "description": "vouchers",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/vouchers"
      }
    },
    "rowFilter.vouchers.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vouchers.code": {
      "name": "code",
      "description": "Unique voucher code (e.g., SAVE5)",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vouchers.title": {
      "name": "title",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vouchers.description": {
      "name": "description",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vouchers.type": {
      "name": "type",
      "description": "Discount type: percentage or fixed amount",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vouchers.value": {
      "name": "value",
      "description": "Discount value (percentage number or fixed RM amount)",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vouchers.points_cost": {
      "name": "points_cost",
      "description": "Points required to redeem this voucher",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vouchers.max_redemptions": {
      "name": "max_redemptions",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vouchers.current_redemptions": {
      "name": "current_redemptions",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vouchers.max_per_user": {
      "name": "max_per_user",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vouchers.min_spend": {
      "name": "min_spend",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vouchers.max_discount": {
      "name": "max_discount",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vouchers.applicable_services": {
      "name": "applicable_services",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vouchers.valid_from": {
      "name": "valid_from",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vouchers.valid_until": {
      "name": "valid_until",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vouchers.created_by": {
      "name": "created_by",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vouchers.is_active": {
      "name": "is_active",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vouchers.is_featured": {
      "name": "is_featured",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vouchers.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vouchers.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.customer_addresses": {
      "name": "customer_addresses",
      "description": "customer_addresses",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/customer_addresses"
      }
    },
    "rowFilter.customer_addresses.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_addresses.user_id": {
      "name": "user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_addresses.label": {
      "name": "label",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_addresses.address_line1": {
      "name": "address_line1",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_addresses.address_line2": {
      "name": "address_line2",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_addresses.city": {
      "name": "city",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_addresses.state": {
      "name": "state",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_addresses.postal_code": {
      "name": "postal_code",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_addresses.country": {
      "name": "country",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_addresses.is_default": {
      "name": "is_default",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_addresses.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_addresses.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_addresses.building_name": {
      "name": "building_name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_addresses.floor": {
      "name": "floor",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_addresses.unit_number": {
      "name": "unit_number",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_addresses.delivery_instructions": {
      "name": "delivery_instructions",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_addresses.contact_number": {
      "name": "contact_number",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_addresses.address_type": {
      "name": "address_type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_addresses.landmark": {
      "name": "landmark",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_addresses.gps_accuracy": {
      "name": "gps_accuracy",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_addresses.last_used_at": {
      "name": "last_used_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_addresses.location": {
      "name": "location",
      "description": "PostGIS Point geometry (SRID 4326) representing the address location. Use ST_X() for longitude, ST_Y() for latitude.",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_addresses.latitude": {
      "name": "latitude",
      "description": "Computed latitude from location geometry (read-only, for backward compatibility)",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_addresses.longitude": {
      "name": "longitude",
      "description": "Computed longitude from location geometry (read-only, for backward compatibility)",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_addresses.location_updated_at": {
      "name": "location_updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.customer_credits": {
      "name": "customer_credits",
      "description": "customer_credits",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/customer_credits"
      }
    },
    "rowFilter.customer_credits.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_credits.user_id": {
      "name": "user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_credits.balance": {
      "name": "balance",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_credits.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_credits.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.route_cache": {
      "name": "route_cache",
      "description": "route_cache",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/route_cache"
      }
    },
    "rowFilter.route_cache.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.route_cache.origin_lat": {
      "name": "origin_lat",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.route_cache.origin_lng": {
      "name": "origin_lng",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.route_cache.destination_lat": {
      "name": "destination_lat",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.route_cache.destination_lng": {
      "name": "destination_lng",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.route_cache.distance_km": {
      "name": "distance_km",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.route_cache.duration_minutes": {
      "name": "duration_minutes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.route_cache.profile": {
      "name": "profile",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.route_cache.traffic_profile": {
      "name": "traffic_profile",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.route_cache.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.route_cache.last_used_at": {
      "name": "last_used_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.route_cache.hit_count": {
      "name": "hit_count",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.route_cache.expires_at": {
      "name": "expires_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.reviews": {
      "name": "reviews",
      "description": "reviews",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/reviews"
      }
    },
    "rowFilter.reviews.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.reviews.booking_id": {
      "name": "booking_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.reviews.customer_id": {
      "name": "customer_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.reviews.barber_id": {
      "name": "barber_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.reviews.barbershop_id": {
      "name": "barbershop_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.reviews.rating": {
      "name": "rating",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.reviews.comment": {
      "name": "comment",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.reviews.images": {
      "name": "images",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.reviews.response": {
      "name": "response",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.reviews.response_at": {
      "name": "response_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.reviews.is_verified": {
      "name": "is_verified",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.reviews.is_flagged": {
      "name": "is_flagged",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.reviews.is_visible": {
      "name": "is_visible",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.reviews.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.reviews.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.onboarding_verification_logs": {
      "name": "onboarding_verification_logs",
      "description": "onboarding_verification_logs",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/onboarding_verification_logs"
      }
    },
    "rowFilter.onboarding_verification_logs.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.onboarding_verification_logs.application_id": {
      "name": "application_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.onboarding_verification_logs.application_type": {
      "name": "application_type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.onboarding_verification_logs.action": {
      "name": "action",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.onboarding_verification_logs.status": {
      "name": "status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.onboarding_verification_logs.notes": {
      "name": "notes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.onboarding_verification_logs.reviewer_id": {
      "name": "reviewer_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.onboarding_verification_logs.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.onboarding_verification_logs.metadata": {
      "name": "metadata",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.notifications": {
      "name": "notifications",
      "description": "notifications",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/notifications"
      }
    },
    "rowFilter.notifications.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notifications.user_id": {
      "name": "user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notifications.type": {
      "name": "type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notifications.title": {
      "name": "title",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notifications.body": {
      "name": "body",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notifications.image_url": {
      "name": "image_url",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notifications.action_url": {
      "name": "action_url",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notifications.action_data": {
      "name": "action_data",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notifications.is_read": {
      "name": "is_read",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notifications.read_at": {
      "name": "read_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notifications.is_sent": {
      "name": "is_sent",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notifications.sent_at": {
      "name": "sent_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notifications.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.user_booking_stats": {
      "name": "user_booking_stats",
      "description": "user_booking_stats",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/user_booking_stats"
      }
    },
    "rowFilter.user_booking_stats.user_id": {
      "name": "user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_booking_stats.total_bookings": {
      "name": "total_bookings",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_booking_stats.completed_bookings": {
      "name": "completed_bookings",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_booking_stats.cancelled_bookings": {
      "name": "cancelled_bookings",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_booking_stats.avg_rating": {
      "name": "avg_rating",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.promo_codes": {
      "name": "promo_codes",
      "description": "promo_codes",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/promo_codes"
      }
    },
    "rowFilter.promo_codes.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.promo_codes.code": {
      "name": "code",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.promo_codes.description": {
      "name": "description",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.promo_codes.discount_type": {
      "name": "discount_type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.promo_codes.discount_value": {
      "name": "discount_value",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.promo_codes.max_discount_amount": {
      "name": "max_discount_amount",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.promo_codes.usage_limit": {
      "name": "usage_limit",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.promo_codes.usage_count": {
      "name": "usage_count",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.promo_codes.per_user_limit": {
      "name": "per_user_limit",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.promo_codes.min_order_amount": {
      "name": "min_order_amount",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.promo_codes.is_active": {
      "name": "is_active",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.promo_codes.valid_from": {
      "name": "valid_from",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.promo_codes.valid_until": {
      "name": "valid_until",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.promo_codes.applicable_to": {
      "name": "applicable_to",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.promo_codes.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.promo_codes.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    }
  },
  "externalDocs": {
    "description": "PostgREST Documentation",
    "url": "https://postgrest.org/en/v13/references/api.html"
  }
}
